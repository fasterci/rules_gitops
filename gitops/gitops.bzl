load("@rules_gitops//gitops:provider.bzl", "GitopsArtifactsInfo")

def __create_gitops_prs_impl(ctx):
    src_by_train = {}
    for src in ctx.attr.srcs:
        gai = src[GitopsArtifactsInfo]
        if not gai.deployment_branch in src_by_train:
            src_by_train[gai.deployment_branch] = []
        src_by_train[gai.deployment_branch].append(src.files_to_run.executable)

    # print("src_by_train:", src_by_train)
    trans_img_pushes = depset(transitive = [obj[GitopsArtifactsInfo].image_pushes for obj in ctx.attr.srcs if obj.files_to_run.executable]).to_list()
    params = ""
    for deployment_branch in src_by_train.keys():
        executables = src_by_train[deployment_branch]
        for exe in executables:
            params += "--resolved_binary {}:{} ".format(deployment_branch, exe.short_path)
    for exe in trans_img_pushes:
        params += "--resolved_push {} ".format(exe.files_to_run.executable.short_path)
    if ctx.attr.release_branch:
        params += "--release_branch {} ".format(ctx.attr.release_branch)
    if ctx.attr.git_repo:
        params += "--git_repo {} ".format(ctx.attr.git_repo)
    if ctx.attr.gitops_path:
        params += "--gitops_path {} ".format(ctx.attr.gitops_path)

    # if ctx.attr.gitopsdir:
    #     params += "--gitopsdir {} ".format(ctx.attr.gitopsdir)
    params += "--push_parallelism {} ".format(ctx.attr.push_parallelism)
    if ctx.attr.gitops_pr_into:
        params += "--gitops_pr_into {} ".format(ctx.attr.gitops_pr_into)
    if ctx.attr.deploy_branch_prefix:
        params += "--deploy_branch_prefix {} ".format(ctx.attr.deploy_branch_prefix)
    if ctx.attr.deployment_branch_suffix:
        params += "--deployment_branch_suffix {} ".format(ctx.attr.deployment_branch_suffix)
    if ctx.attr.git_server:
        params += "--git_server {} ".format(ctx.attr.git_server)
    if ctx.attr.dry_run:
        params += "--dry_run "
    if ctx.attr.github_repo_owner:
        params += "--github_repo_owner {} ".format(ctx.attr.github_repo_owner)
    if ctx.attr.github_repo:
        params += "--github_repo {} ".format(ctx.attr.github_repo)

    ctx.actions.expand_template(
        template = ctx.file._tpl,
        substitutions = {
            "%{params}": params,
            "%{prer}": ctx.executable._prer.short_path,
        },
        output = ctx.outputs.executable,
    )
    runfiles = ctx.runfiles(files = ctx.files.srcs)
    transitive_runfiles = []
    for target in ctx.attr.srcs:
        transitive_runfiles.append(target[DefaultInfo].default_runfiles)
    transitive_runfiles.append(ctx.attr._prer[DefaultInfo].default_runfiles)
    for obj in trans_img_pushes:
        transitive_runfiles.append(obj[DefaultInfo].default_runfiles)
    runfiles = runfiles.merge_all(transitive_runfiles)
    return [
        DefaultInfo(
            executable = ctx.outputs.executable,
            runfiles = runfiles,
        ),
    ]

create_gitops_prs = rule(
    doc = """Rule to all required gitops prs for a given k8s_deploy targets
    Typical usage is to combine this rule with k8s_deploy to create a single executable that
    push images to registry and creates gitops prs
    """,
    implementation = __create_gitops_prs_impl,
    attrs = {
        "srcs": attr.label_list(
            mandatory = True,
            allow_files = False,
            providers = [GitopsArtifactsInfo],
            doc = "List of gitops targets generated by k8s_deploy. Use update_gitops_targets.sh to update",
        ),
        "git_repo": attr.string(
            doc = "gitops repo to create PRs in.",
        ),
        "gitops_path": attr.string(
            doc = "location to store files in repo.",
        ),
        # "gitopsdir": attr.string(
        #     doc = "do not use temporary directory for gitops, use this directory instead.",
        # ),
        "push_parallelism": attr.int(
            doc = "number of parallel pushes to registry",
            default = 4,
        ),
        "gitops_pr_into": attr.string(
            doc = "use this branch as the source branch and target for deployment PR",
            default = "main",
        ),
        "release_branch": attr.string(
            doc = "release branch to create PRs in.",
        ),
        "deploy_branch_prefix": attr.string(
            doc = "prefix for deployment branches",
        ),
        "deployment_branch_suffix": attr.string(
            doc = "suffix for deployment branches",
        ),
        "git_server": attr.string(
            doc = "git server to create PRs in.",
            default = "github",
        ),
        "dry_run": attr.bool(
            doc = "dry run mode",
            default = False,
        ),
        "github_repo_owner": attr.string(
            doc = "github repo owner to create PRs in.",
        ),
        "github_repo": attr.string(
            doc = "github repo to create PRs in.",
        ),
        "_tpl": attr.label(
            default = Label("@rules_gitops//gitops:create_gitops_prs.tpl.sh"),
            allow_single_file = True,
        ),
        "_prer": attr.label(
            default = Label("@rules_gitops//gitops/prer:create_gitops_prs"),
            allow_single_file = True,
            cfg = "exec",
            executable = True,
        ),
    },
    executable = True,
)
