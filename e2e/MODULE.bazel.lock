{
  "lockFileVersion": 3,
  "moduleFileHash": "e61ddaa125ecc6a6cd88fc36018aa36d45b97d5f53e8ff742e18c8f6927e5992",
  "flags": {
    "cmdRegistries": [
      "https://bcr.bazel.build/"
    ],
    "cmdModuleOverrides": {},
    "allowedYankedVersions": [],
    "envVarAllowedYankedVersions": "",
    "ignoreDevDependency": false,
    "directDependenciesMode": "WARNING",
    "compatibilityMode": "ERROR"
  },
  "localOverrideHashes": {
    "bazel_tools": "922ea6752dc9105de5af957f7a99a6933c0a6a712d23df6aad16a9c399f7e787",
    "rules_gitops": "792da5f3f699708be38f84723a5b2ae754f382fcad9a1937a5b61d70b600bb7b"
  },
  "moduleDepGraph": {
    "<root>": {
      "name": "",
      "version": "",
      "key": "<root>",
      "repoName": "",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_oci//oci:extensions.bzl",
          "extensionName": "oci",
          "usingModule": "<root>",
          "location": {
            "file": "@@//:MODULE.bazel",
            "line": 4,
            "column": 20
          },
          "imports": {
            "go_image_static": "go_image_static"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "pull",
              "attributeValues": {
                "name": "go_image_static",
                "digest": "sha256:ebd8cc37d22551dce0957ba8e58f03b22a8448bbf844c8c9ded4feef883b36bc",
                "image": "gcr.io/distroless/static"
              },
              "devDependency": false,
              "location": {
                "file": "@@//:MODULE.bazel",
                "line": 5,
                "column": 9
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "io_bazel_rules_go": "rules_go@0.46.0",
        "bazel_skylib": "bazel_skylib@1.5.0",
        "rules_oci": "rules_oci@1.7.2",
        "rules_gitops": "rules_gitops@_",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      }
    },
    "rules_go@0.46.0": {
      "name": "rules_go",
      "version": "0.46.0",
      "key": "rules_go@0.46.0",
      "repoName": "io_bazel_rules_go",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@go_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@io_bazel_rules_go//go:extensions.bzl",
          "extensionName": "go_sdk",
          "usingModule": "rules_go@0.46.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_go/0.46.0/MODULE.bazel",
            "line": 16,
            "column": 23
          },
          "imports": {
            "go_toolchains": "go_toolchains",
            "io_bazel_rules_nogo": "io_bazel_rules_nogo"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "download",
              "attributeValues": {
                "name": "go_default_sdk",
                "version": "1.21.1"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_go/0.46.0/MODULE.bazel",
                "line": 17,
                "column": 16
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@gazelle//:extensions.bzl",
          "extensionName": "go_deps",
          "usingModule": "rules_go@0.46.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_go/0.46.0/MODULE.bazel",
            "line": 32,
            "column": 24
          },
          "imports": {
            "com_github_gogo_protobuf": "com_github_gogo_protobuf",
            "com_github_golang_mock": "com_github_golang_mock",
            "com_github_golang_protobuf": "com_github_golang_protobuf",
            "org_golang_google_genproto": "org_golang_google_genproto",
            "org_golang_google_grpc": "org_golang_google_grpc",
            "org_golang_google_grpc_cmd_protoc_gen_go_grpc": "org_golang_google_grpc_cmd_protoc_gen_go_grpc",
            "org_golang_google_protobuf": "org_golang_google_protobuf",
            "org_golang_x_net": "org_golang_x_net",
            "org_golang_x_tools": "org_golang_x_tools"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "from_file",
              "attributeValues": {
                "go_mod": "//:go.mod"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_go/0.46.0/MODULE.bazel",
                "line": 33,
                "column": 18
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "io_bazel_rules_go_bazel_features": "bazel_features@1.9.1",
        "bazel_skylib": "bazel_skylib@1.5.0",
        "platforms": "platforms@0.0.8",
        "rules_proto": "rules_proto@4.0.0",
        "com_google_protobuf": "protobuf@3.19.6",
        "gazelle": "gazelle@0.37.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_go~0.46.0",
          "urls": [
            "https://github.com/bazelbuild/rules_go/releases/download/v0.46.0/rules_go-v0.46.0.zip"
          ],
          "integrity": "sha256-gKmCd60TEdrNg3+bFttiiHcC6fHRxMn3ltASGkbI4YQ=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "bazel_skylib@1.5.0": {
      "name": "bazel_skylib",
      "version": "1.5.0",
      "key": "bazel_skylib@1.5.0",
      "repoName": "bazel_skylib",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "//toolchains/unittest:cmd_toolchain",
        "//toolchains/unittest:bash_toolchain"
      ],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.8",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "bazel_skylib~1.5.0",
          "urls": [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz"
          ],
          "integrity": "sha256-zVWgYudjuTSZIfD124w5MyiNyLpPdt2UFqrGis7jy5Q=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_oci@1.7.2": {
      "name": "rules_oci",
      "version": "1.7.2",
      "key": "rules_oci@1.7.2",
      "repoName": "rules_oci",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@oci_crane_toolchains//:all",
        "@oci_crane_registry_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_oci//oci:extensions.bzl",
          "extensionName": "oci",
          "usingModule": "rules_oci@1.7.2",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_oci/1.7.2/MODULE.bazel",
            "line": 14,
            "column": 20
          },
          "imports": {
            "oci_crane_registry_toolchains": "oci_crane_registry_toolchains",
            "oci_crane_toolchains": "oci_crane_toolchains"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "toolchains",
              "attributeValues": {
                "crane_version": "v0.18.0"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_oci/1.7.2/MODULE.bazel",
                "line": 15,
                "column": 15
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "aspect_bazel_lib": "aspect_bazel_lib@2.7.1",
        "bazel_skylib": "bazel_skylib@1.5.0",
        "platforms": "platforms@0.0.8",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_oci~1.7.2",
          "urls": [
            "https://github.com/bazel-contrib/rules_oci/releases/download/v1.7.2/rules_oci-v1.7.2.tar.gz"
          ],
          "integrity": "sha256-z2uL6CzeMNrvGKCVGddSaWUDF+QNkXyGM8+OOrVkXqU=",
          "strip_prefix": "rules_oci-1.7.2",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_oci/1.7.2/patches/module_dot_bazel_version.patch": "sha256-NxdDAvGfmkSYa0jxbGYcmWfGmC1CSZv7ZsaZa6ftdZM="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_gitops@_": {
      "name": "rules_gitops",
      "version": "0.50.0",
      "key": "rules_gitops@_",
      "repoName": "rules_gitops",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@kustomize_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@io_bazel_rules_go//go:extensions.bzl",
          "extensionName": "go_sdk",
          "usingModule": "rules_gitops@_",
          "location": {
            "file": "@@rules_gitops~override//:MODULE.bazel",
            "line": 13,
            "column": 23
          },
          "imports": {},
          "devImports": [],
          "tags": [
            {
              "tagName": "download",
              "attributeValues": {
                "version": "1.21.5"
              },
              "devDependency": false,
              "location": {
                "file": "@@rules_gitops~override//:MODULE.bazel",
                "line": 14,
                "column": 16
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_gazelle//:extensions.bzl",
          "extensionName": "go_deps",
          "usingModule": "rules_gitops@_",
          "location": {
            "file": "@@rules_gitops~override//:MODULE.bazel",
            "line": 18,
            "column": 24
          },
          "imports": {
            "com_github_ghodss_yaml": "com_github_ghodss_yaml",
            "com_github_golang_protobuf": "com_github_golang_protobuf",
            "com_github_google_go_cmp": "com_github_google_go_cmp",
            "com_github_google_go_github_v32": "com_github_google_go_github_v32",
            "com_github_xanzy_go_gitlab": "com_github_xanzy_go_gitlab",
            "io_k8s_api": "io_k8s_api",
            "io_k8s_apimachinery": "io_k8s_apimachinery",
            "io_k8s_client_go": "io_k8s_client_go",
            "org_golang_x_oauth2": "org_golang_x_oauth2"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "from_file",
              "attributeValues": {
                "go_mod": "//:go.mod"
              },
              "devDependency": false,
              "location": {
                "file": "@@rules_gitops~override//:MODULE.bazel",
                "line": 19,
                "column": 18
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_gitops//gitops:extensions.bzl",
          "extensionName": "toolchains",
          "usingModule": "rules_gitops@_",
          "location": {
            "file": "@@rules_gitops~override//:MODULE.bazel",
            "line": 33,
            "column": 27
          },
          "imports": {
            "kustomize_bin": "kustomize_bin",
            "kustomize_toolchains": "kustomize_toolchains"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "kustomize",
              "attributeValues": {},
              "devDependency": false,
              "location": {
                "file": "@@rules_gitops~override//:MODULE.bazel",
                "line": 37,
                "column": 21
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "aspect_bazel_lib": "aspect_bazel_lib@2.7.1",
        "bazel_skylib": "bazel_skylib@1.5.0",
        "platforms": "platforms@0.0.8",
        "rules_oci": "rules_oci@1.7.2",
        "rules_pkg": "rules_pkg@0.9.1",
        "io_bazel_rules_go": "rules_go@0.46.0",
        "bazel_gazelle": "gazelle@0.37.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      }
    },
    "bazel_tools@_": {
      "name": "bazel_tools",
      "version": "",
      "key": "bazel_tools@_",
      "repoName": "bazel_tools",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_cc_toolchains//:all",
        "@local_config_sh//:local_sh_toolchain"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_tools//tools/cpp:cc_configure.bzl",
          "extensionName": "cc_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 17,
            "column": 29
          },
          "imports": {
            "local_config_cc": "local_config_cc",
            "local_config_cc_toolchains": "local_config_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/osx:xcode_configure.bzl",
          "extensionName": "xcode_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 21,
            "column": 32
          },
          "imports": {
            "local_config_xcode": "local_config_xcode"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_java//java:extensions.bzl",
          "extensionName": "toolchains",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 24,
            "column": 32
          },
          "imports": {
            "local_jdk": "local_jdk",
            "remote_java_tools": "remote_java_tools",
            "remote_java_tools_linux": "remote_java_tools_linux",
            "remote_java_tools_windows": "remote_java_tools_windows",
            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/sh:sh_configure.bzl",
          "extensionName": "sh_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 35,
            "column": 39
          },
          "imports": {
            "local_config_sh": "local_config_sh"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/test:extensions.bzl",
          "extensionName": "remote_coverage_tools_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 39,
            "column": 48
          },
          "imports": {
            "remote_coverage_tools": "remote_coverage_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/android:android_extensions.bzl",
          "extensionName": "remote_android_tools_extensions",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 42,
            "column": 42
          },
          "imports": {
            "android_gmaven_r8": "android_gmaven_r8",
            "android_tools": "android_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "rules_cc": "rules_cc@0.0.9",
        "rules_java": "rules_java@7.1.0",
        "rules_license": "rules_license@0.0.7",
        "rules_proto": "rules_proto@4.0.0",
        "rules_python": "rules_python@0.10.2",
        "platforms": "platforms@0.0.8",
        "com_google_protobuf": "protobuf@3.19.6",
        "zlib": "zlib@1.3",
        "build_bazel_apple_support": "apple_support@1.5.0",
        "local_config_platform": "local_config_platform@_"
      }
    },
    "local_config_platform@_": {
      "name": "local_config_platform",
      "version": "",
      "key": "local_config_platform@_",
      "repoName": "local_config_platform",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.8",
        "bazel_tools": "bazel_tools@_"
      }
    },
    "bazel_features@1.9.1": {
      "name": "bazel_features",
      "version": "1.9.1",
      "key": "bazel_features@1.9.1",
      "repoName": "bazel_features",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_features//private:extensions.bzl",
          "extensionName": "version_extension",
          "usingModule": "bazel_features@1.9.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/bazel_features/1.9.1/MODULE.bazel",
            "line": 15,
            "column": 24
          },
          "imports": {
            "bazel_features_globals": "bazel_features_globals",
            "bazel_features_version": "bazel_features_version"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.5.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "bazel_features~1.9.1",
          "urls": [
            "https://github.com/bazel-contrib/bazel_features/releases/download/v1.9.1/bazel_features-v1.9.1.tar.gz"
          ],
          "integrity": "sha256-13h9oomn+0lzUiEa0gDsn2mIIqngdXpJdv2fcT/zcrM=",
          "strip_prefix": "bazel_features-1.9.1",
          "remote_patches": {
            "https://bcr.bazel.build/modules/bazel_features/1.9.1/patches/module_dot_bazel_version.patch": "sha256-a2ofwS5r2Qq+WxzVa7sLbRXhfT3JoYxSlUVQH/nL454="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "platforms@0.0.8": {
      "name": "platforms",
      "version": "0.0.8",
      "key": "platforms@0.0.8",
      "repoName": "platforms",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "rules_license": "rules_license@0.0.7",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "platforms",
          "urls": [
            "https://github.com/bazelbuild/platforms/releases/download/0.0.8/platforms-0.0.8.tar.gz"
          ],
          "integrity": "sha256-gVBAZgU4ns7LbaB8vLUJ1WN6OrmiS8abEQFTE2fYnXQ=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_proto@4.0.0": {
      "name": "rules_proto",
      "version": "4.0.0",
      "key": "rules_proto@4.0.0",
      "repoName": "rules_proto",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.5.0",
        "rules_cc": "rules_cc@0.0.9",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_proto~4.0.0",
          "urls": [
            "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.zip"
          ],
          "integrity": "sha256-Lr5z6xyuRA19pNtRYMGjKaynwQpck4H/lwYyVjyhoq4=",
          "strip_prefix": "rules_proto-4.0.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_proto/4.0.0/patches/module_dot_bazel.patch": "sha256-MclJO7tIAM2ElDAmscNId9pKTpOuDGHgVlW/9VBOIp0="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "protobuf@3.19.6": {
      "name": "protobuf",
      "version": "3.19.6",
      "key": "protobuf@3.19.6",
      "repoName": "protobuf",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.5.0",
        "zlib": "zlib@1.3",
        "rules_python": "rules_python@0.10.2",
        "rules_cc": "rules_cc@0.0.9",
        "rules_proto": "rules_proto@4.0.0",
        "rules_java": "rules_java@7.1.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "protobuf~3.19.6",
          "urls": [
            "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v3.19.6.zip"
          ],
          "integrity": "sha256-OH4sVZuyx8G8N5jE5s/wFTgaebJ1hpavy/johzC0c4k=",
          "strip_prefix": "protobuf-3.19.6",
          "remote_patches": {
            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/relative_repo_names.patch": "sha256-w/5gw/zGv8NFId+669hcdw1Uus2lxgYpulATHIwIByI=",
            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/remove_dependency_on_rules_jvm_external.patch": "sha256-THUTnVgEBmjA0W7fKzIyZOVG58DnW9HQTkr4D2zKUUc=",
            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/add_module_dot_bazel_for_examples.patch": "sha256-s/b1gi3baK3LsXefI2rQilhmkb2R5jVJdnT6zEcdfHY=",
            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/module_dot_bazel.patch": "sha256-S0DEni8zgx7rHscW3z/rCEubQnYec0XhNet640cw0h4="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "gazelle@0.37.0": {
      "name": "gazelle",
      "version": "0.37.0",
      "key": "gazelle@0.37.0",
      "repoName": "bazel_gazelle",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@io_bazel_rules_go//go:extensions.bzl",
          "extensionName": "go_sdk",
          "usingModule": "gazelle@0.37.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/gazelle/0.37.0/MODULE.bazel",
            "line": 13,
            "column": 23
          },
          "imports": {
            "go_host_compatible_sdk_label": "go_host_compatible_sdk_label"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_gazelle//internal/bzlmod:non_module_deps.bzl",
          "extensionName": "non_module_deps",
          "usingModule": "gazelle@0.37.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/gazelle/0.37.0/MODULE.bazel",
            "line": 21,
            "column": 32
          },
          "imports": {
            "bazel_gazelle_go_repository_cache": "bazel_gazelle_go_repository_cache",
            "bazel_gazelle_go_repository_tools": "bazel_gazelle_go_repository_tools",
            "bazel_gazelle_is_bazel_module": "bazel_gazelle_is_bazel_module"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_gazelle//:extensions.bzl",
          "extensionName": "go_deps",
          "usingModule": "gazelle@0.37.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/gazelle/0.37.0/MODULE.bazel",
            "line": 29,
            "column": 24
          },
          "imports": {
            "com_github_bazelbuild_buildtools": "com_github_bazelbuild_buildtools",
            "com_github_bmatcuk_doublestar_v4": "com_github_bmatcuk_doublestar_v4",
            "com_github_fsnotify_fsnotify": "com_github_fsnotify_fsnotify",
            "com_github_google_go_cmp": "com_github_google_go_cmp",
            "com_github_pmezard_go_difflib": "com_github_pmezard_go_difflib",
            "org_golang_x_mod": "org_golang_x_mod",
            "org_golang_x_sync": "org_golang_x_sync",
            "org_golang_x_tools": "org_golang_x_tools",
            "org_golang_x_tools_go_vcs": "org_golang_x_tools_go_vcs",
            "bazel_gazelle_go_repository_config": "bazel_gazelle_go_repository_config",
            "com_github_golang_protobuf": "com_github_golang_protobuf",
            "org_golang_google_protobuf": "org_golang_google_protobuf"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "from_file",
              "attributeValues": {
                "go_mod": "//:go.mod"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/gazelle/0.37.0/MODULE.bazel",
                "line": 30,
                "column": 18
              }
            },
            {
              "tagName": "module",
              "attributeValues": {
                "path": "golang.org/x/tools",
                "sum": "h1:k8NLag8AGHnn+PHbl7g43CtqZAwG60vZkLqgyZgIHgQ=",
                "version": "v0.18.0"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/gazelle/0.37.0/MODULE.bazel",
                "line": 34,
                "column": 15
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.9.1",
        "bazel_skylib": "bazel_skylib@1.5.0",
        "com_google_protobuf": "protobuf@3.19.6",
        "io_bazel_rules_go": "rules_go@0.46.0",
        "rules_proto": "rules_proto@4.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "gazelle~0.37.0",
          "urls": [
            "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.37.0/bazel-gazelle-v0.37.0.tar.gz"
          ],
          "integrity": "sha256-12v3pg/YsFBEQJDfooN6Tq+YKeEWVhjuNdzspcvfWNU=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "aspect_bazel_lib@2.7.1": {
      "name": "aspect_bazel_lib",
      "version": "2.7.1",
      "key": "aspect_bazel_lib@2.7.1",
      "repoName": "aspect_bazel_lib",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@copy_directory_toolchains//:all",
        "@copy_to_directory_toolchains//:all",
        "@jq_toolchains//:all",
        "@yq_toolchains//:all",
        "@coreutils_toolchains//:all",
        "@expand_template_toolchains//:all",
        "@bats_toolchains//:all",
        "@bsd_tar_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@aspect_bazel_lib//lib:extensions.bzl",
          "extensionName": "toolchains",
          "usingModule": "aspect_bazel_lib@2.7.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/MODULE.bazel",
            "line": 17,
            "column": 37
          },
          "imports": {
            "bats_toolchains": "bats_toolchains",
            "bsd_tar_toolchains": "bsd_tar_toolchains",
            "copy_directory_toolchains": "copy_directory_toolchains",
            "copy_to_directory_toolchains": "copy_to_directory_toolchains",
            "coreutils_toolchains": "coreutils_toolchains",
            "expand_template_toolchains": "expand_template_toolchains",
            "jq_toolchains": "jq_toolchains",
            "yq_toolchains": "yq_toolchains"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "copy_directory",
              "attributeValues": {},
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/MODULE.bazel",
                "line": 18,
                "column": 36
              }
            },
            {
              "tagName": "copy_to_directory",
              "attributeValues": {},
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/MODULE.bazel",
                "line": 19,
                "column": 39
              }
            },
            {
              "tagName": "jq",
              "attributeValues": {},
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/MODULE.bazel",
                "line": 20,
                "column": 24
              }
            },
            {
              "tagName": "yq",
              "attributeValues": {},
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/MODULE.bazel",
                "line": 21,
                "column": 24
              }
            },
            {
              "tagName": "coreutils",
              "attributeValues": {},
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/MODULE.bazel",
                "line": 22,
                "column": 31
              }
            },
            {
              "tagName": "tar",
              "attributeValues": {},
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/MODULE.bazel",
                "line": 23,
                "column": 25
              }
            },
            {
              "tagName": "expand_template",
              "attributeValues": {},
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/MODULE.bazel",
                "line": 24,
                "column": 37
              }
            },
            {
              "tagName": "bats",
              "attributeValues": {},
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/MODULE.bazel",
                "line": 25,
                "column": 26
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.5.0",
        "platforms": "platforms@0.0.8",
        "io_bazel_stardoc": "stardoc@0.5.4",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "aspect_bazel_lib~2.7.1",
          "urls": [
            "https://github.com/aspect-build/bazel-lib/releases/download/v2.7.1/bazel-lib-v2.7.1.tar.gz"
          ],
          "integrity": "sha256-tVTreUKlq0TJAHffagx2/GfFh0yURqAH6bpovoK9R5Y=",
          "strip_prefix": "bazel-lib-2.7.1",
          "remote_patches": {
            "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/patches/go_dev_dep.patch": "sha256-KgABwDzOT+DugUHn9tHLOz05osnk2FLsS10d5zqG/M0=",
            "https://bcr.bazel.build/modules/aspect_bazel_lib/2.7.1/patches/module_dot_bazel_version.patch": "sha256-mNWVPqhb9ui6YgnmU3Xe7yM9KnvSY0QWLo/ETqjYR2U="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_pkg@0.9.1": {
      "name": "rules_pkg",
      "version": "0.9.1",
      "key": "rules_pkg@0.9.1",
      "repoName": "rules_pkg",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "rules_license": "rules_license@0.0.7",
        "bazel_skylib": "bazel_skylib@1.5.0",
        "rules_python": "rules_python@0.10.2",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_pkg~0.9.1",
          "urls": [
            "https://github.com/bazelbuild/rules_pkg/releases/download/0.9.1/rules_pkg-0.9.1.tar.gz"
          ],
          "integrity": "sha256-j57i3BDBrlFO5ZmotC7Zn6Jit1cFj2WtPDhCif9wxLg=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_cc@0.0.9": {
      "name": "rules_cc",
      "version": "0.0.9",
      "key": "rules_cc@0.0.9",
      "repoName": "rules_cc",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_cc_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_tools//tools/cpp:cc_configure.bzl",
          "extensionName": "cc_configure_extension",
          "usingModule": "rules_cc@0.0.9",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_cc/0.0.9/MODULE.bazel",
            "line": 9,
            "column": 29
          },
          "imports": {
            "local_config_cc_toolchains": "local_config_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "platforms": "platforms@0.0.8",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_cc~0.0.9",
          "urls": [
            "https://github.com/bazelbuild/rules_cc/releases/download/0.0.9/rules_cc-0.0.9.tar.gz"
          ],
          "integrity": "sha256-IDeHW5pEVtzkp50RKorohbvEqtlo5lh9ym5k86CQDN8=",
          "strip_prefix": "rules_cc-0.0.9",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_cc/0.0.9/patches/module_dot_bazel_version.patch": "sha256-mM+qzOI0SgAdaJBlWOSMwMPKpaA9b7R37Hj/tp5bb4g="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "rules_java@7.1.0": {
      "name": "rules_java",
      "version": "7.1.0",
      "key": "rules_java@7.1.0",
      "repoName": "rules_java",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "//toolchains:all",
        "@local_jdk//:runtime_toolchain_definition",
        "@local_jdk//:bootstrap_runtime_toolchain_definition",
        "@remotejdk11_linux_toolchain_config_repo//:all",
        "@remotejdk11_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk11_linux_ppc64le_toolchain_config_repo//:all",
        "@remotejdk11_linux_s390x_toolchain_config_repo//:all",
        "@remotejdk11_macos_toolchain_config_repo//:all",
        "@remotejdk11_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk11_win_toolchain_config_repo//:all",
        "@remotejdk11_win_arm64_toolchain_config_repo//:all",
        "@remotejdk17_linux_toolchain_config_repo//:all",
        "@remotejdk17_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk17_linux_ppc64le_toolchain_config_repo//:all",
        "@remotejdk17_linux_s390x_toolchain_config_repo//:all",
        "@remotejdk17_macos_toolchain_config_repo//:all",
        "@remotejdk17_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk17_win_toolchain_config_repo//:all",
        "@remotejdk17_win_arm64_toolchain_config_repo//:all",
        "@remotejdk21_linux_toolchain_config_repo//:all",
        "@remotejdk21_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk21_macos_toolchain_config_repo//:all",
        "@remotejdk21_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk21_win_toolchain_config_repo//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_java//java:extensions.bzl",
          "extensionName": "toolchains",
          "usingModule": "rules_java@7.1.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_java/7.1.0/MODULE.bazel",
            "line": 19,
            "column": 27
          },
          "imports": {
            "remote_java_tools": "remote_java_tools",
            "remote_java_tools_linux": "remote_java_tools_linux",
            "remote_java_tools_windows": "remote_java_tools_windows",
            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64",
            "local_jdk": "local_jdk",
            "remotejdk11_linux_toolchain_config_repo": "remotejdk11_linux_toolchain_config_repo",
            "remotejdk11_linux_aarch64_toolchain_config_repo": "remotejdk11_linux_aarch64_toolchain_config_repo",
            "remotejdk11_linux_ppc64le_toolchain_config_repo": "remotejdk11_linux_ppc64le_toolchain_config_repo",
            "remotejdk11_linux_s390x_toolchain_config_repo": "remotejdk11_linux_s390x_toolchain_config_repo",
            "remotejdk11_macos_toolchain_config_repo": "remotejdk11_macos_toolchain_config_repo",
            "remotejdk11_macos_aarch64_toolchain_config_repo": "remotejdk11_macos_aarch64_toolchain_config_repo",
            "remotejdk11_win_toolchain_config_repo": "remotejdk11_win_toolchain_config_repo",
            "remotejdk11_win_arm64_toolchain_config_repo": "remotejdk11_win_arm64_toolchain_config_repo",
            "remotejdk17_linux_toolchain_config_repo": "remotejdk17_linux_toolchain_config_repo",
            "remotejdk17_linux_aarch64_toolchain_config_repo": "remotejdk17_linux_aarch64_toolchain_config_repo",
            "remotejdk17_linux_ppc64le_toolchain_config_repo": "remotejdk17_linux_ppc64le_toolchain_config_repo",
            "remotejdk17_linux_s390x_toolchain_config_repo": "remotejdk17_linux_s390x_toolchain_config_repo",
            "remotejdk17_macos_toolchain_config_repo": "remotejdk17_macos_toolchain_config_repo",
            "remotejdk17_macos_aarch64_toolchain_config_repo": "remotejdk17_macos_aarch64_toolchain_config_repo",
            "remotejdk17_win_toolchain_config_repo": "remotejdk17_win_toolchain_config_repo",
            "remotejdk17_win_arm64_toolchain_config_repo": "remotejdk17_win_arm64_toolchain_config_repo",
            "remotejdk21_linux_toolchain_config_repo": "remotejdk21_linux_toolchain_config_repo",
            "remotejdk21_linux_aarch64_toolchain_config_repo": "remotejdk21_linux_aarch64_toolchain_config_repo",
            "remotejdk21_macos_toolchain_config_repo": "remotejdk21_macos_toolchain_config_repo",
            "remotejdk21_macos_aarch64_toolchain_config_repo": "remotejdk21_macos_aarch64_toolchain_config_repo",
            "remotejdk21_win_toolchain_config_repo": "remotejdk21_win_toolchain_config_repo"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "platforms": "platforms@0.0.8",
        "rules_cc": "rules_cc@0.0.9",
        "bazel_skylib": "bazel_skylib@1.5.0",
        "rules_proto": "rules_proto@4.0.0",
        "rules_license": "rules_license@0.0.7",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_java~7.1.0",
          "urls": [
            "https://github.com/bazelbuild/rules_java/releases/download/7.1.0/rules_java-7.1.0.tar.gz"
          ],
          "integrity": "sha256-o3pOX2OrgnFuXdau75iO2EYcegC46TYnImKJn1h81OE=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_license@0.0.7": {
      "name": "rules_license",
      "version": "0.0.7",
      "key": "rules_license@0.0.7",
      "repoName": "rules_license",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_license~0.0.7",
          "urls": [
            "https://github.com/bazelbuild/rules_license/releases/download/0.0.7/rules_license-0.0.7.tar.gz"
          ],
          "integrity": "sha256-RTHezLkTY5ww5cdRKgVNXYdWmNrrddjPkPKEN1/nw2A=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_python@0.10.2": {
      "name": "rules_python",
      "version": "0.10.2",
      "key": "rules_python@0.10.2",
      "repoName": "rules_python",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@bazel_tools//tools/python:autodetecting_toolchain"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_python//python:extensions.bzl",
          "extensionName": "pip_install",
          "usingModule": "rules_python@0.10.2",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_python/0.10.2/MODULE.bazel",
            "line": 7,
            "column": 28
          },
          "imports": {
            "pypi__click": "pypi__click",
            "pypi__colorama": "pypi__colorama",
            "pypi__installer": "pypi__installer",
            "pypi__pep517": "pypi__pep517",
            "pypi__pip": "pypi__pip",
            "pypi__pip_tools": "pypi__pip_tools",
            "pypi__setuptools": "pypi__setuptools",
            "pypi__tomli": "pypi__tomli",
            "pypi__wheel": "pypi__wheel"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_python~0.10.2",
          "urls": [
            "https://github.com/bazelbuild/rules_python/archive/refs/tags/0.10.2.tar.gz"
          ],
          "integrity": "sha256-o6bpn0l74In4HsCCiC5AJGv9Q19S9OgvN+iUSbBFc/Y=",
          "strip_prefix": "rules_python-0.10.2",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_python/0.10.2/patches/module_dot_bazel.patch": "sha256-TScILAmXmmMtjJIwhLrgNZgqGPs6G3OAzXaLXLDNFrA="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "zlib@1.3": {
      "name": "zlib",
      "version": "1.3",
      "key": "zlib@1.3",
      "repoName": "zlib",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.8",
        "rules_cc": "rules_cc@0.0.9",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "zlib~1.3",
          "urls": [
            "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"
          ],
          "integrity": "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4=",
          "strip_prefix": "zlib-1.3",
          "remote_patches": {
            "https://bcr.bazel.build/modules/zlib/1.3/patches/add_build_file.patch": "sha256-Ei+FYaaOo7A3jTKunMEodTI0Uw5NXQyZEcboMC8JskY=",
            "https://bcr.bazel.build/modules/zlib/1.3/patches/module_dot_bazel.patch": "sha256-fPWLM+2xaF/kuy+kZc1YTfW6hNjrkG400Ho7gckuyJk="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "apple_support@1.5.0": {
      "name": "apple_support",
      "version": "1.5.0",
      "key": "apple_support@1.5.0",
      "repoName": "build_bazel_apple_support",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_apple_cc_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@build_bazel_apple_support//crosstool:setup.bzl",
          "extensionName": "apple_cc_configure_extension",
          "usingModule": "apple_support@1.5.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/apple_support/1.5.0/MODULE.bazel",
            "line": 17,
            "column": 35
          },
          "imports": {
            "local_config_apple_cc": "local_config_apple_cc",
            "local_config_apple_cc_toolchains": "local_config_apple_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.5.0",
        "platforms": "platforms@0.0.8",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "apple_support~1.5.0",
          "urls": [
            "https://github.com/bazelbuild/apple_support/releases/download/1.5.0/apple_support.1.5.0.tar.gz"
          ],
          "integrity": "sha256-miM41vja0yRPgj8txghKA+TQ+7J8qJLclw5okNW0gYQ=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "stardoc@0.5.4": {
      "name": "stardoc",
      "version": "0.5.4",
      "key": "stardoc@0.5.4",
      "repoName": "stardoc",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.5.0",
        "rules_java": "rules_java@7.1.0",
        "rules_license": "rules_license@0.0.7",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "stardoc~0.5.4",
          "urls": [
            "https://github.com/bazelbuild/stardoc/releases/download/0.5.4/stardoc-0.5.4.tar.gz"
          ],
          "integrity": "sha256-7FcTnkZvquVj8vw5YJ2klIpHm7UbbWeu3X2bG4BZxDM=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    }
  },
  "moduleExtensions": {
    "@@apple_support~1.5.0//crosstool:setup.bzl%apple_cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "pMLFCYaRPkgXPQ8vtuNkMfiHfPmRBy6QJfnid4sWfv0=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_apple_cc": {
            "bzlFile": "@@apple_support~1.5.0//crosstool:setup.bzl",
            "ruleClassName": "_apple_cc_autoconf",
            "attributes": {
              "name": "apple_support~1.5.0~apple_cc_configure_extension~local_config_apple_cc"
            }
          },
          "local_config_apple_cc_toolchains": {
            "bzlFile": "@@apple_support~1.5.0//crosstool:setup.bzl",
            "ruleClassName": "_apple_cc_autoconf_toolchains",
            "attributes": {
              "name": "apple_support~1.5.0~apple_cc_configure_extension~local_config_apple_cc_toolchains"
            }
          }
        },
        "recordedRepoMappingEntries": []
      }
    },
    "@@aspect_bazel_lib~2.7.1//lib:extensions.bzl%toolchains": {
      "general": {
        "bzlTransitiveDigest": "Wr4R4spWdxkHguQSuyVb51/ZaMe13ZdUc4kMeudqbAk=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "expand_template_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:expand_template_toolchain.bzl",
            "ruleClassName": "expand_template_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~expand_template_windows_amd64",
              "platform": "windows_amd64"
            }
          },
          "copy_to_directory_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_to_directory_windows_amd64",
              "platform": "windows_amd64"
            }
          },
          "jq_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~jq_darwin_amd64",
              "platform": "darwin_amd64",
              "version": "1.7"
            }
          },
          "copy_to_directory_freebsd_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_to_directory_freebsd_amd64",
              "platform": "freebsd_amd64"
            }
          },
          "expand_template_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:expand_template_toolchain.bzl",
            "ruleClassName": "expand_template_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~expand_template_linux_amd64",
              "platform": "linux_amd64"
            }
          },
          "jq_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~jq_linux_arm64",
              "platform": "linux_arm64",
              "version": "1.7"
            }
          },
          "coreutils_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~coreutils_darwin_arm64",
              "platform": "darwin_arm64",
              "version": "0.0.23"
            }
          },
          "copy_to_directory_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_to_directory_linux_arm64",
              "platform": "linux_arm64"
            }
          },
          "bsd_tar_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:tar_toolchain.bzl",
            "ruleClassName": "bsdtar_binary_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~bsd_tar_linux_arm64",
              "platform": "linux_arm64"
            }
          },
          "copy_directory_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_directory_toolchain.bzl",
            "ruleClassName": "copy_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_directory_darwin_amd64",
              "platform": "darwin_amd64"
            }
          },
          "coreutils_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~coreutils_darwin_amd64",
              "platform": "darwin_amd64",
              "version": "0.0.23"
            }
          },
          "coreutils_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~coreutils_linux_arm64",
              "platform": "linux_arm64",
              "version": "0.0.23"
            }
          },
          "yq_linux_s390x": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~yq_linux_s390x",
              "platform": "linux_s390x",
              "version": "4.25.2"
            }
          },
          "yq": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_host_alias_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~yq"
            }
          },
          "expand_template_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:expand_template_toolchain.bzl",
            "ruleClassName": "expand_template_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~expand_template_darwin_amd64",
              "platform": "darwin_amd64"
            }
          },
          "copy_directory_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_directory_toolchain.bzl",
            "ruleClassName": "copy_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_directory_linux_amd64",
              "platform": "linux_amd64"
            }
          },
          "jq_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~jq_darwin_arm64",
              "platform": "darwin_arm64",
              "version": "1.7"
            }
          },
          "yq_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~yq_darwin_amd64",
              "platform": "darwin_amd64",
              "version": "4.25.2"
            }
          },
          "copy_directory_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_directory_toolchain.bzl",
            "ruleClassName": "copy_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_directory_linux_arm64",
              "platform": "linux_arm64"
            }
          },
          "expand_template_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:expand_template_toolchain.bzl",
            "ruleClassName": "expand_template_toolchains_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~expand_template_toolchains",
              "user_repository_name": "expand_template"
            }
          },
          "bats_assert": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~bats_assert",
              "sha256": "98ca3b685f8b8993e48ec057565e6e2abcc541034ed5b0e81f191505682037fd",
              "urls": [
                "https://github.com/bats-core/bats-assert/archive/v2.1.0.tar.gz"
              ],
              "strip_prefix": "bats-assert-2.1.0",
              "build_file_content": "load(\"@aspect_bazel_lib//lib:copy_to_directory.bzl\", \"copy_to_directory\")\n\ncopy_to_directory(\n    name = \"assert\",\n    hardlink = \"on\",\n    srcs = glob([\n        \"src/**\",\n        \"load.bash\",\n    ]),\n    out = \"bats-assert\",\n    visibility = [\"//visibility:public\"]\n)\n"
            }
          },
          "copy_to_directory_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_to_directory_darwin_amd64",
              "platform": "darwin_amd64"
            }
          },
          "bsd_tar_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:tar_toolchain.bzl",
            "ruleClassName": "bsdtar_binary_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~bsd_tar_linux_amd64",
              "platform": "linux_amd64"
            }
          },
          "yq_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_toolchains_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~yq_toolchains",
              "user_repository_name": "yq"
            }
          },
          "bats_support": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~bats_support",
              "sha256": "7815237aafeb42ddcc1b8c698fc5808026d33317d8701d5ec2396e9634e2918f",
              "urls": [
                "https://github.com/bats-core/bats-support/archive/v0.3.0.tar.gz"
              ],
              "strip_prefix": "bats-support-0.3.0",
              "build_file_content": "load(\"@aspect_bazel_lib//lib:copy_to_directory.bzl\", \"copy_to_directory\")\n\ncopy_to_directory(\n    name = \"support\",\n    hardlink = \"on\",\n    srcs = glob([\n        \"src/**\",\n        \"load.bash\",\n    ]),\n    out = \"bats-support\",\n    visibility = [\"//visibility:public\"]\n)\n"
            }
          },
          "bsd_tar_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:tar_toolchain.bzl",
            "ruleClassName": "bsdtar_binary_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~bsd_tar_windows_amd64",
              "platform": "windows_amd64"
            }
          },
          "jq": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_host_alias_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~jq"
            }
          },
          "expand_template_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:expand_template_toolchain.bzl",
            "ruleClassName": "expand_template_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~expand_template_darwin_arm64",
              "platform": "darwin_arm64"
            }
          },
          "bsd_tar_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:tar_toolchain.bzl",
            "ruleClassName": "bsdtar_binary_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~bsd_tar_darwin_arm64",
              "platform": "darwin_arm64"
            }
          },
          "copy_to_directory_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_to_directory_linux_amd64",
              "platform": "linux_amd64"
            }
          },
          "coreutils_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~coreutils_linux_amd64",
              "platform": "linux_amd64",
              "version": "0.0.23"
            }
          },
          "copy_directory_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_directory_toolchain.bzl",
            "ruleClassName": "copy_directory_toolchains_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_directory_toolchains",
              "user_repository_name": "copy_directory"
            }
          },
          "yq_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~yq_linux_amd64",
              "platform": "linux_amd64",
              "version": "4.25.2"
            }
          },
          "copy_to_directory_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_to_directory_darwin_arm64",
              "platform": "darwin_arm64"
            }
          },
          "coreutils_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_toolchains_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~coreutils_toolchains",
              "user_repository_name": "coreutils"
            }
          },
          "copy_directory_freebsd_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_directory_toolchain.bzl",
            "ruleClassName": "copy_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_directory_freebsd_amd64",
              "platform": "freebsd_amd64"
            }
          },
          "bats_file": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~bats_file",
              "sha256": "9b69043241f3af1c2d251f89b4fcafa5df3f05e97b89db18d7c9bdf5731bb27a",
              "urls": [
                "https://github.com/bats-core/bats-file/archive/v0.4.0.tar.gz"
              ],
              "strip_prefix": "bats-file-0.4.0",
              "build_file_content": "load(\"@aspect_bazel_lib//lib:copy_to_directory.bzl\", \"copy_to_directory\")\n\ncopy_to_directory(\n    name = \"file\",\n    hardlink = \"on\",\n    srcs = glob([\n        \"src/**\",\n        \"load.bash\",\n    ]),\n    out = \"bats-file\",\n    visibility = [\"//visibility:public\"]\n)\n"
            }
          },
          "expand_template_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:expand_template_toolchain.bzl",
            "ruleClassName": "expand_template_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~expand_template_linux_arm64",
              "platform": "linux_arm64"
            }
          },
          "jq_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~jq_linux_amd64",
              "platform": "linux_amd64",
              "version": "1.7"
            }
          },
          "bsd_tar_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:tar_toolchain.bzl",
            "ruleClassName": "bsdtar_binary_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~bsd_tar_darwin_amd64",
              "platform": "darwin_amd64"
            }
          },
          "bsd_tar_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:tar_toolchain.bzl",
            "ruleClassName": "tar_toolchains_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~bsd_tar_toolchains",
              "user_repository_name": "bsd_tar"
            }
          },
          "bats_toolchains": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~bats_toolchains",
              "sha256": "a1a9f7875aa4b6a9480ca384d5865f1ccf1b0b1faead6b47aa47d79709a5c5fd",
              "urls": [
                "https://github.com/bats-core/bats-core/archive/v1.10.0.tar.gz"
              ],
              "strip_prefix": "bats-core-1.10.0",
              "build_file_content": "load(\"@local_config_platform//:constraints.bzl\", \"HOST_CONSTRAINTS\")\nload(\"@aspect_bazel_lib//lib/private:bats_toolchain.bzl\", \"bats_toolchain\")\nload(\"@aspect_bazel_lib//lib:copy_to_directory.bzl\", \"copy_to_directory\")\n\ncopy_to_directory(\n    name = \"core\",\n    hardlink = \"on\",\n    srcs = glob([\n        \"lib/**\",\n        \"libexec/**\"\n    ]) + [\"bin/bats\"],\n    out = \"bats-core\",\n)\n\nbats_toolchain(\n    name = \"toolchain\",\n    core = \":core\",\n    libraries = [\"@bats_support//:support\", \"@bats_assert//:assert\", \"@bats_file//:file\"]\n)\n\ntoolchain(\n    name = \"bats_toolchain\",\n    exec_compatible_with = HOST_CONSTRAINTS,\n    toolchain = \":toolchain\",\n    toolchain_type = \"@aspect_bazel_lib//lib:bats_toolchain_type\",\n)\n"
            }
          },
          "yq_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~yq_windows_amd64",
              "platform": "windows_amd64",
              "version": "4.25.2"
            }
          },
          "jq_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~jq_windows_amd64",
              "platform": "windows_amd64",
              "version": "1.7"
            }
          },
          "expand_template_freebsd_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:expand_template_toolchain.bzl",
            "ruleClassName": "expand_template_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~expand_template_freebsd_amd64",
              "platform": "freebsd_amd64"
            }
          },
          "yq_linux_ppc64le": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~yq_linux_ppc64le",
              "platform": "linux_ppc64le",
              "version": "4.25.2"
            }
          },
          "copy_to_directory_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_toolchains_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_to_directory_toolchains",
              "user_repository_name": "copy_to_directory"
            }
          },
          "jq_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_toolchains_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~jq_toolchains",
              "user_repository_name": "jq"
            }
          },
          "copy_directory_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_directory_toolchain.bzl",
            "ruleClassName": "copy_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_directory_darwin_arm64",
              "platform": "darwin_arm64"
            }
          },
          "copy_directory_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_directory_toolchain.bzl",
            "ruleClassName": "copy_directory_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~copy_directory_windows_amd64",
              "platform": "windows_amd64"
            }
          },
          "yq_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~yq_darwin_arm64",
              "platform": "darwin_arm64",
              "version": "4.25.2"
            }
          },
          "coreutils_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~coreutils_windows_amd64",
              "platform": "windows_amd64",
              "version": "0.0.23"
            }
          },
          "yq_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "aspect_bazel_lib~2.7.1~toolchains~yq_linux_arm64",
              "platform": "linux_arm64",
              "version": "4.25.2"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "aspect_bazel_lib~2.7.1",
            "aspect_bazel_lib",
            "aspect_bazel_lib~2.7.1"
          ],
          [
            "aspect_bazel_lib~2.7.1",
            "bazel_skylib",
            "bazel_skylib~1.5.0"
          ],
          [
            "aspect_bazel_lib~2.7.1",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@bazel_features~1.9.1//private:extensions.bzl%version_extension": {
      "general": {
        "bzlTransitiveDigest": "vdfDkWaCEv75vG6fwHL2g0FjypmO5wJl4O23w1/Efrs=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "bazel_features_version": {
            "bzlFile": "@@bazel_features~1.9.1//private:version_repo.bzl",
            "ruleClassName": "version_repo",
            "attributes": {
              "name": "bazel_features~1.9.1~version_extension~bazel_features_version"
            }
          },
          "bazel_features_globals": {
            "bzlFile": "@@bazel_features~1.9.1//private:globals_repo.bzl",
            "ruleClassName": "globals_repo",
            "attributes": {
              "name": "bazel_features~1.9.1~version_extension~bazel_features_globals",
              "globals": {
                "RunEnvironmentInfo": "5.3.0",
                "DefaultInfo": "0.0.1",
                "__TestingOnly_NeverAvailable": "1000000000.0.0"
              }
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features~1.9.1",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@bazel_tools//tools/android:android_extensions.bzl%remote_android_tools_extensions": {
      "general": {
        "bzlTransitiveDigest": "4x/FXzwoadac6uV9ItZ4eGOyCculGHHrKUhLFNWo3lA=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "android_tools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "bazel_tools~remote_android_tools_extensions~android_tools",
              "sha256": "2b661a761a735b41c41b3a78089f4fc1982626c76ddb944604ae3ff8c545d3c2",
              "url": "https://mirror.bazel.build/bazel_android_tools/android_tools_pkg-0.30.0.tar"
            }
          },
          "android_gmaven_r8": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_jar",
            "attributes": {
              "name": "bazel_tools~remote_android_tools_extensions~android_gmaven_r8",
              "sha256": "57a696749695a09381a87bc2f08c3a8ed06a717a5caa3ef878a3077e0d3af19d",
              "url": "https://maven.google.com/com/android/tools/r8/8.1.56/r8-8.1.56.jar"
            }
          }
        },
        "recordedRepoMappingEntries": []
      }
    },
    "@@bazel_tools//tools/cpp:cc_configure.bzl%cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "mcsWHq3xORJexV5/4eCvNOLxFOQKV6eli3fkr+tEaqE=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_cc": {
            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
            "ruleClassName": "cc_autoconf",
            "attributes": {
              "name": "bazel_tools~cc_configure_extension~local_config_cc"
            }
          },
          "local_config_cc_toolchains": {
            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
            "ruleClassName": "cc_autoconf_toolchains",
            "attributes": {
              "name": "bazel_tools~cc_configure_extension~local_config_cc_toolchains"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_tools",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@bazel_tools//tools/osx:xcode_configure.bzl%xcode_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "Qh2bWTU6QW6wkrd87qrU4YeY+SG37Nvw3A0PR4Y0L2Y=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_xcode": {
            "bzlFile": "@@bazel_tools//tools/osx:xcode_configure.bzl",
            "ruleClassName": "xcode_autoconf",
            "attributes": {
              "name": "bazel_tools~xcode_configure_extension~local_config_xcode",
              "xcode_locator": "@bazel_tools//tools/osx:xcode_locator.m",
              "remote_xcode": ""
            }
          }
        },
        "recordedRepoMappingEntries": []
      }
    },
    "@@bazel_tools//tools/sh:sh_configure.bzl%sh_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "hp4NgmNjEg5+xgvzfh6L83bt9/aiiWETuNpwNuF1MSU=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_sh": {
            "bzlFile": "@@bazel_tools//tools/sh:sh_configure.bzl",
            "ruleClassName": "sh_config",
            "attributes": {
              "name": "bazel_tools~sh_configure_extension~local_config_sh"
            }
          }
        },
        "recordedRepoMappingEntries": []
      }
    },
    "@@bazel_tools//tools/test:extensions.bzl%remote_coverage_tools_extension": {
      "general": {
        "bzlTransitiveDigest": "y48q5zUu2oMiYv7yUyi7rFB0wt14eqiF/RQcWT6vP7I=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "remote_coverage_tools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "bazel_tools~remote_coverage_tools_extension~remote_coverage_tools",
              "sha256": "7006375f6756819b7013ca875eab70a541cf7d89142d9c511ed78ea4fefa38af",
              "urls": [
                "https://mirror.bazel.build/bazel_coverage_output_generator/releases/coverage_output_generator-v2.6.zip"
              ]
            }
          }
        },
        "recordedRepoMappingEntries": []
      }
    },
    "@@gazelle~0.37.0//:extensions.bzl%go_deps": {
      "general": {
        "bzlTransitiveDigest": "A0gH5MSE6WBK+QRqp+nPrRZg9xNadGiczXum6UhsKPQ=",
        "accumulatedFileDigests": {
          "@@rules_gitops~override//:go.sum": "ea2ab9d786c1cae6ba7c7ab6b5007807487eb493904e832de877df5e38dea65f",
          "@@rules_go~0.46.0//:go.sum": "d56fdb19b21a5f12bcf625c49432371ac39c2def0f564098fbda107f7c080f40",
          "@@gazelle~0.37.0//:go.mod": "3bdf577b31bd67ce2b7bc1c438077c421395278e79b2e95e8de7d7942d0297d7",
          "@@rules_go~0.46.0//:go.mod": "de22304b720f7f61350ec1c9739de6c0a1b1103fd22bfeb6e92c6c843ddc6d6e",
          "@@rules_gitops~override//:go.mod": "46cf1c9b0a1c30aec2e1481c79886b8e927f45cac950925245e50163c0789223",
          "@@gazelle~0.37.0//:go.sum": "14df932fff1ea6aa2b9ac6ad53b8acf3d1cffe44e3375e75d1c4c9d2a86d3473"
        },
        "envVariables": {},
        "generatedRepoSpecs": {
          "org_golang_x_tools_go_vcs": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_tools_go_vcs",
              "importpath": "golang.org/x/tools/go/vcs",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:cOIJqWBl99H1dH5LWizPa+0ImeeJq3t3cJjaeOWUAL4=",
              "replace": "",
              "version": "v0.1.0-deprecated"
            }
          },
          "com_github_fsnotify_fsnotify": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_fsnotify_fsnotify",
              "importpath": "github.com/fsnotify/fsnotify",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=",
              "replace": "",
              "version": "v1.7.0"
            }
          },
          "com_github_hashicorp_go_retryablehttp": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_hashicorp_go_retryablehttp",
              "importpath": "github.com/hashicorp/go-retryablehttp",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:AcYqCvkpalPnPF2pn0KamgwamS42TqUDDYFRKq/RAd0=",
              "replace": "",
              "version": "v0.7.2"
            }
          },
          "com_github_containerd_stargz_snapshotter_estargz": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_containerd_stargz_snapshotter_estargz",
              "importpath": "github.com/containerd/stargz-snapshotter/estargz",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:OqlDCK3ZVUO6C3B/5FSkDwbkEETK84kQgEeFwDC+62k=",
              "replace": "",
              "version": "v0.14.3"
            }
          },
          "com_github_mitchellh_go_homedir": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_mitchellh_go_homedir",
              "importpath": "github.com/mitchellh/go-homedir",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=",
              "replace": "",
              "version": "v1.1.0"
            }
          },
          "com_github_spf13_cobra": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_spf13_cobra",
              "importpath": "github.com/spf13/cobra",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:hyqWnYt1ZQShIddO5kBpj3vu05/++x6tJ6dg8EC572I=",
              "replace": "",
              "version": "v1.7.0"
            }
          },
          "io_k8s_sigs_structured_merge_diff_v4": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~io_k8s_sigs_structured_merge_diff_v4",
              "importpath": "sigs.k8s.io/structured-merge-diff/v4",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:PRbqxJClWWYMNV1dhaG4NsibJbArud9kFxnAMREiWFE=",
              "replace": "",
              "version": "v4.2.3"
            }
          },
          "io_k8s_client_go": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~io_k8s_client_go",
              "importpath": "k8s.io/client-go",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:87CXzYJnAMGaa/IDDfRdhTzxk/wzGZ+/HUQpqgVSZXU=",
              "replace": "",
              "version": "v0.26.1"
            }
          },
          "com_github_sirupsen_logrus": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_sirupsen_logrus",
              "importpath": "github.com/sirupsen/logrus",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:Ou41VVR3nMWWmTiEUnj0OlsgOSCUFgsPAOl6jRIcVtQ=",
              "replace": "",
              "version": "v1.9.1"
            }
          },
          "com_github_modern_go_reflect2": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_modern_go_reflect2",
              "importpath": "github.com/modern-go/reflect2",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=",
              "replace": "",
              "version": "v1.0.2"
            }
          },
          "org_golang_x_net": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_net",
              "importpath": "golang.org/x/net",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:mIYleuAkSbHh0tCv7RvjL3F6ZVbLjq4+R7zbOn3Kokg=",
              "replace": "",
              "version": "v0.18.0"
            }
          },
          "com_github_spf13_pflag": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_spf13_pflag",
              "importpath": "github.com/spf13/pflag",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=",
              "replace": "",
              "version": "v1.0.5"
            }
          },
          "io_k8s_api": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~io_k8s_api",
              "importpath": "k8s.io/api",
              "build_directives": [
                "gazelle:proto disable"
              ],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:f+SWYiPd/GsiWwVRz+NbFyCgvv75Pk9NK6dlkZgpCRQ=",
              "replace": "",
              "version": "v0.26.1"
            }
          },
          "in_gopkg_inf_v0": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~in_gopkg_inf_v0",
              "importpath": "gopkg.in/inf.v0",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=",
              "replace": "",
              "version": "v0.9.1"
            }
          },
          "org_golang_x_oauth2": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_oauth2",
              "importpath": "golang.org/x/oauth2",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:6dkIjl3j3LtZ/O3sTgZTMsLKSftL/B8Zgq4huOIIUu8=",
              "replace": "",
              "version": "v0.8.0"
            }
          },
          "com_github_google_gofuzz": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_google_gofuzz",
              "importpath": "github.com/google/gofuzz",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=",
              "replace": "",
              "version": "v1.2.0"
            }
          },
          "in_gopkg_yaml_v2": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~in_gopkg_yaml_v2",
              "importpath": "gopkg.in/yaml.v2",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=",
              "replace": "",
              "version": "v2.4.0"
            }
          },
          "io_k8s_sigs_json": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~io_k8s_sigs_json",
              "importpath": "sigs.k8s.io/json",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:EDPBXCAspyGV4jQlpZSudPeMmr1bNJefnuqLsRAsHZo=",
              "replace": "",
              "version": "v0.0.0-20221116044647-bc3834ca7abd"
            }
          },
          "com_github_golang_mock": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_golang_mock",
              "importpath": "github.com/golang/mock",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:YojYx61/OLFsiv6Rw1Z96LpldJIy31o+UHmwAUMJ6/U=",
              "replace": "",
              "version": "v1.7.0-rc.1"
            }
          },
          "com_github_google_gnostic": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_google_gnostic",
              "importpath": "github.com/google/gnostic",
              "build_directives": [
                "gazelle:proto disable"
              ],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:ZK/5VhkoX835RikCHpSUJV9a+S3e1zLh59YnyWeBW+0=",
              "replace": "",
              "version": "v0.6.9"
            }
          },
          "com_github_josharian_intern": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_josharian_intern",
              "importpath": "github.com/josharian/intern",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=",
              "replace": "",
              "version": "v1.0.0"
            }
          },
          "org_golang_x_sync": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_sync",
              "importpath": "golang.org/x/sync",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=",
              "replace": "",
              "version": "v0.6.0"
            }
          },
          "org_golang_google_appengine": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_google_appengine",
              "importpath": "google.golang.org/appengine",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:FZR1q0exgwxzPzp/aF+VccGrSfxfPpkBqjIIEq3ru6c=",
              "replace": "",
              "version": "v1.6.7"
            }
          },
          "com_github_imdario_mergo": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_imdario_mergo",
              "importpath": "github.com/imdario/mergo",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:lFzP57bqS/wsqKssCGmtLAb8A0wKjLGrve2q3PPVcBk=",
              "replace": "",
              "version": "v0.3.13"
            }
          },
          "com_github_opencontainers_image_spec": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_opencontainers_image_spec",
              "importpath": "github.com/opencontainers/image-spec",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:fzg1mXZFj8YdPeNkRXMg+zb88BFV0Ys52cJydRwBkb8=",
              "replace": "",
              "version": "v1.1.0-rc3"
            }
          },
          "com_github_docker_docker": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_docker_docker",
              "importpath": "github.com/docker/docker",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:z4bf8HvONXX9Tde5lGBMQ7yCJgNahmJumdrStZAbeY4=",
              "replace": "",
              "version": "v24.0.0+incompatible"
            }
          },
          "com_github_modern_go_concurrent": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_modern_go_concurrent",
              "importpath": "github.com/modern-go/concurrent",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=",
              "replace": "",
              "version": "v0.0.0-20180306012644-bacd9c7ef1dd"
            }
          },
          "org_golang_google_protobuf": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_google_protobuf",
              "importpath": "google.golang.org/protobuf",
              "build_directives": [
                "gazelle:proto disable"
              ],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:g0LDEJHgrBl9N9r17Ru3sqWhkIx2NB67okBHPwC7hs8=",
              "replace": "",
              "version": "v1.31.0"
            }
          },
          "org_golang_x_term": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_term",
              "importpath": "golang.org/x/term",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:bb+I9cTfFazGW51MZqBVmZy7+JEJMouUHTUSKVQLBek=",
              "replace": "",
              "version": "v0.13.0"
            }
          },
          "org_golang_x_mod": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_mod",
              "importpath": "golang.org/x/mod",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:QX4fJ0Rr5cPQCF7O9lh9Se4pmwfwskqZfq5moyldzic=",
              "replace": "",
              "version": "v0.16.0"
            }
          },
          "com_github_google_go_github_v32": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_google_go_github_v32",
              "importpath": "github.com/google/go-github/v32",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:GWkQOdXqviCPx7Q7Fj+KyPoGm4SwHRh8rheoPhd27II=",
              "replace": "",
              "version": "v32.1.0"
            }
          },
          "com_github_json_iterator_go": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_json_iterator_go",
              "importpath": "github.com/json-iterator/go",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=",
              "replace": "",
              "version": "v1.1.12"
            }
          },
          "in_gopkg_yaml_v3": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~in_gopkg_yaml_v3",
              "importpath": "gopkg.in/yaml.v3",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=",
              "replace": "",
              "version": "v3.0.1"
            }
          },
          "org_golang_x_crypto": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_crypto",
              "importpath": "golang.org/x/crypto",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:wBqGXzWJW6m1XrIKlAH0Hs1JJ7+9KBwnIO8v66Q9cHc=",
              "replace": "",
              "version": "v0.14.0"
            }
          },
          "com_github_google_go_containerregistry": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_google_go_containerregistry",
              "importpath": "github.com/google/go-containerregistry",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:yMQ62Al6/V0Z7CqIrrS1iYoA5/oQCm88DeNujc7C1KY=",
              "replace": "",
              "version": "v0.19.1"
            }
          },
          "com_github_golang_protobuf": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_golang_protobuf",
              "importpath": "github.com/golang/protobuf",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=",
              "replace": "",
              "version": "v1.5.3"
            }
          },
          "com_github_docker_docker_credential_helpers": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_docker_docker_credential_helpers",
              "importpath": "github.com/docker/docker-credential-helpers",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:xtCHsjxogADNZcdv1pKUHXryefjlVRqWqIhk/uXJp0A=",
              "replace": "",
              "version": "v0.7.0"
            }
          },
          "com_github_google_go_querystring": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_google_go_querystring",
              "importpath": "github.com/google/go-querystring",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:AnCroh3fv4ZBgVIf1Iwtovgjaw/GiKJo8M8yD/fhyJ8=",
              "replace": "",
              "version": "v1.1.0"
            }
          },
          "com_github_munnerz_goautoneg": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_munnerz_goautoneg",
              "importpath": "github.com/munnerz/goautoneg",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=",
              "replace": "",
              "version": "v0.0.0-20191010083416-a7dc8b61c822"
            }
          },
          "io_k8s_kube_openapi": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~io_k8s_kube_openapi",
              "importpath": "k8s.io/kube-openapi",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:oFDpQ7FfzinCtrFOl4izwOWsdTprlS2A9IXBENMW0UA=",
              "replace": "",
              "version": "v0.0.0-20230217203603-ff9a8e8fa21d"
            }
          },
          "com_github_inconshreveable_mousetrap": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_inconshreveable_mousetrap",
              "importpath": "github.com/inconshreveable/mousetrap",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=",
              "replace": "",
              "version": "v1.1.0"
            }
          },
          "com_github_moby_spdystream": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_moby_spdystream",
              "importpath": "github.com/moby/spdystream",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:cjW1zVyyoiM0T7b6UoySUFqzXMoqRckQtXwGPiBhOM8=",
              "replace": "",
              "version": "v0.2.0"
            }
          },
          "com_github_ghodss_yaml": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_ghodss_yaml",
              "importpath": "github.com/ghodss/yaml",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:wQHKEahhL6wmXdzwWG11gIVCkOv05bNOh+Rxn0yngAk=",
              "replace": "",
              "version": "v1.0.0"
            }
          },
          "com_github_klauspost_compress": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_klauspost_compress",
              "importpath": "github.com/klauspost/compress",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:IFV2oUNUzZaz+XyusxpLzpzS8Pt5rh0Z16For/djlyI=",
              "replace": "",
              "version": "v1.16.5"
            }
          },
          "org_golang_x_time": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_time",
              "importpath": "golang.org/x/time",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:rg5rLMjNzMS1RkNLzCG38eapWhnYLFYXDXj2gOlr8j4=",
              "replace": "",
              "version": "v0.3.0"
            }
          },
          "org_golang_google_grpc_cmd_protoc_gen_go_grpc": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_google_grpc_cmd_protoc_gen_go_grpc",
              "importpath": "google.golang.org/grpc/cmd/protoc-gen-go-grpc",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:rNBFJjBCOgVr9pWD7rs/knKL4FRTKgpZmsRfV214zcA=",
              "replace": "",
              "version": "v1.3.0"
            }
          },
          "com_github_go_openapi_jsonpointer": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_go_openapi_jsonpointer",
              "importpath": "github.com/go-openapi/jsonpointer",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:eCs3fxoIi3Wh6vtgmLTOjdhSpiqphQ+DaPn38N2ZdrE=",
              "replace": "",
              "version": "v0.19.6"
            }
          },
          "com_github_bmatcuk_doublestar_v4": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_bmatcuk_doublestar_v4",
              "importpath": "github.com/bmatcuk/doublestar/v4",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:FH9SifrbvJhnlQpztAx++wlkk70QBf0iBWDwNy7PA4I=",
              "replace": "",
              "version": "v4.6.1"
            }
          },
          "com_github_pmezard_go_difflib": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_pmezard_go_difflib",
              "importpath": "github.com/pmezard/go-difflib",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=",
              "replace": "",
              "version": "v1.0.0"
            }
          },
          "com_github_davecgh_go_spew": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_davecgh_go_spew",
              "importpath": "github.com/davecgh/go-spew",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=",
              "replace": "",
              "version": "v1.1.1"
            }
          },
          "org_golang_x_tools": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_tools",
              "importpath": "golang.org/x/tools",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:k8NLag8AGHnn+PHbl7g43CtqZAwG60vZkLqgyZgIHgQ=",
              "replace": "",
              "version": "v0.18.0"
            }
          },
          "com_github_vbatts_tar_split": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_vbatts_tar_split",
              "importpath": "github.com/vbatts/tar-split",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:hLFqsOLQ1SsppQNTMpkpPXClLDfC2A3Zgy9OUU+RVck=",
              "replace": "",
              "version": "v0.11.3"
            }
          },
          "com_github_bazelbuild_buildtools": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_bazelbuild_buildtools",
              "importpath": "github.com/bazelbuild/buildtools",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:VNqmvOfFzn2Hrtoni8vqgXlIQ4C2Zt22fxeZ9gOOkp0=",
              "replace": "",
              "version": "v0.0.0-20240313121412-66c605173954"
            }
          },
          "org_golang_google_genproto": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_google_genproto",
              "importpath": "google.golang.org/genproto",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:+kGHl1aib/qcwaRi1CbqBZ1rk19r85MNUf8HaBghugY=",
              "replace": "",
              "version": "v0.0.0-20200526211855-cb27e3aa2013"
            }
          },
          "com_github_gogo_protobuf": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_gogo_protobuf",
              "importpath": "github.com/gogo/protobuf",
              "build_directives": [
                "gazelle:proto disable"
              ],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=",
              "replace": "",
              "version": "v1.3.2"
            }
          },
          "com_github_pkg_errors": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_pkg_errors",
              "importpath": "github.com/pkg/errors",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
              "replace": "",
              "version": "v0.9.1"
            }
          },
          "com_github_emicklei_go_restful_v3": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_emicklei_go_restful_v3",
              "importpath": "github.com/emicklei/go-restful/v3",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:rc42Y5YTp7Am7CS630D7JmhRjq4UlEUuEKfrDac4bSQ=",
              "replace": "",
              "version": "v3.10.1"
            }
          },
          "org_golang_google_grpc": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_google_grpc",
              "importpath": "google.golang.org/grpc",
              "build_directives": [
                "gazelle:proto disable"
              ],
              "build_file_generation": "on",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:pnP7OclFFFgFi4VHQDQDaoXUVauOFyktqTsqqgzFKbc=",
              "replace": "",
              "version": "v1.40.1"
            }
          },
          "com_github_go_openapi_swag": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_go_openapi_swag",
              "importpath": "github.com/go-openapi/swag",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:yMBqmnQ0gyZvEb/+KzuWZOXgllrXT4SADYbvDaXHv/g=",
              "replace": "",
              "version": "v0.22.3"
            }
          },
          "com_github_opencontainers_go_digest": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_opencontainers_go_digest",
              "importpath": "github.com/opencontainers/go-digest",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=",
              "replace": "",
              "version": "v1.0.0"
            }
          },
          "com_github_hashicorp_go_cleanhttp": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_hashicorp_go_cleanhttp",
              "importpath": "github.com/hashicorp/go-cleanhttp",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:035FKYIWjmULyFRBKPs8TBQoi0x6d9G4xc9neXJWAZQ=",
              "replace": "",
              "version": "v0.5.2"
            }
          },
          "com_github_google_go_cmp": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_google_go_cmp",
              "importpath": "github.com/google/go-cmp",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=",
              "replace": "",
              "version": "v0.6.0"
            }
          },
          "io_k8s_sigs_yaml": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~io_k8s_sigs_yaml",
              "importpath": "sigs.k8s.io/yaml",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:a2VclLzOGrwOHDiV8EfBGhvjHvP46CtW5j6POvhYGGo=",
              "replace": "",
              "version": "v1.3.0"
            }
          },
          "org_golang_x_text": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_text",
              "importpath": "golang.org/x/text",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=",
              "replace": "",
              "version": "v0.14.0"
            }
          },
          "com_github_go_logr_logr": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_go_logr_logr",
              "importpath": "github.com/go-logr/logr",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:2DntVwHkVopvECVRSlL5PSo9eG+cAkDCuckLubN+rq0=",
              "replace": "",
              "version": "v1.2.3"
            }
          },
          "com_github_mailru_easyjson": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_mailru_easyjson",
              "importpath": "github.com/mailru/easyjson",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=",
              "replace": "",
              "version": "v0.7.7"
            }
          },
          "io_k8s_klog_v2": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~io_k8s_klog_v2",
              "importpath": "k8s.io/klog/v2",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:VkTxIV/FjRXn1fgNNcKGM8cfmL1Z33ZjXRTVxKCoF5M=",
              "replace": "",
              "version": "v2.90.0"
            }
          },
          "com_github_docker_distribution": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_docker_distribution",
              "importpath": "github.com/docker/distribution",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:T3de5rq0dB1j30rp0sA2rER+m322EBzniBPB6ZIzuh8=",
              "replace": "",
              "version": "v2.8.2+incompatible"
            }
          },
          "io_k8s_utils": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~io_k8s_utils",
              "importpath": "k8s.io/utils",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:kmDqav+P+/5e1i9tFfHq1qcF3sOrDp+YEkVDAHu7Jwk=",
              "replace": "",
              "version": "v0.0.0-20230220204549-a5ecb0141aa5"
            }
          },
          "com_github_xanzy_go_gitlab": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_xanzy_go_gitlab",
              "importpath": "github.com/xanzy/go-gitlab",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:CH1Q7NDklqZllox4ICVF4PwlhQGfPtE+w08Jsb74ZX0=",
              "replace": "",
              "version": "v0.80.2"
            }
          },
          "com_github_docker_cli": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_docker_cli",
              "importpath": "github.com/docker/cli",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:0+1VshNwBQzQAx9lOl+OYCTCEAD8fKs/qeXMx3O0wqM=",
              "replace": "",
              "version": "v24.0.0+incompatible"
            }
          },
          "io_k8s_apimachinery": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~io_k8s_apimachinery",
              "importpath": "k8s.io/apimachinery",
              "build_directives": [
                "gazelle:go_generate_proto false",
                "gazelle:proto_import_prefix k8s.io/apimachinery"
              ],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:8EZ/eGJL+hY/MYCNwhmDzVqq2lPl3N3Bo8rvweJwXUQ=",
              "replace": "",
              "version": "v0.26.1"
            }
          },
          "bazel_gazelle_go_repository_config": {
            "bzlFile": "@@gazelle~0.37.0//internal/bzlmod:go_deps.bzl",
            "ruleClassName": "_go_repository_config",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~bazel_gazelle_go_repository_config",
              "importpaths": {
                "com_github_gogo_protobuf": "github.com/gogo/protobuf",
                "com_github_golang_mock": "github.com/golang/mock",
                "com_github_golang_protobuf": "github.com/golang/protobuf",
                "org_golang_x_net": "golang.org/x/net",
                "org_golang_x_tools": "golang.org/x/tools",
                "org_golang_google_genproto": "google.golang.org/genproto",
                "org_golang_google_grpc": "google.golang.org/grpc",
                "org_golang_google_grpc_cmd_protoc_gen_go_grpc": "google.golang.org/grpc/cmd/protoc-gen-go-grpc",
                "org_golang_google_protobuf": "google.golang.org/protobuf",
                "org_golang_x_mod": "golang.org/x/mod",
                "org_golang_x_sys": "golang.org/x/sys",
                "org_golang_x_text": "golang.org/x/text",
                "com_github_ghodss_yaml": "github.com/ghodss/yaml",
                "com_github_google_go_cmp": "github.com/google/go-cmp",
                "com_github_google_go_containerregistry": "github.com/google/go-containerregistry",
                "com_github_google_go_github_v32": "github.com/google/go-github/v32",
                "com_github_xanzy_go_gitlab": "github.com/xanzy/go-gitlab",
                "org_golang_x_oauth2": "golang.org/x/oauth2",
                "io_k8s_api": "k8s.io/api",
                "io_k8s_apimachinery": "k8s.io/apimachinery",
                "io_k8s_client_go": "k8s.io/client-go",
                "com_github_containerd_stargz_snapshotter_estargz": "github.com/containerd/stargz-snapshotter/estargz",
                "com_github_davecgh_go_spew": "github.com/davecgh/go-spew",
                "com_github_docker_cli": "github.com/docker/cli",
                "com_github_docker_distribution": "github.com/docker/distribution",
                "com_github_docker_docker": "github.com/docker/docker",
                "com_github_docker_docker_credential_helpers": "github.com/docker/docker-credential-helpers",
                "com_github_emicklei_go_restful_v3": "github.com/emicklei/go-restful/v3",
                "com_github_go_logr_logr": "github.com/go-logr/logr",
                "com_github_go_openapi_jsonpointer": "github.com/go-openapi/jsonpointer",
                "com_github_go_openapi_jsonreference": "github.com/go-openapi/jsonreference",
                "com_github_go_openapi_swag": "github.com/go-openapi/swag",
                "com_github_google_gnostic": "github.com/google/gnostic",
                "com_github_google_go_querystring": "github.com/google/go-querystring",
                "com_github_google_gofuzz": "github.com/google/gofuzz",
                "com_github_hashicorp_go_cleanhttp": "github.com/hashicorp/go-cleanhttp",
                "com_github_hashicorp_go_retryablehttp": "github.com/hashicorp/go-retryablehttp",
                "com_github_imdario_mergo": "github.com/imdario/mergo",
                "com_github_inconshreveable_mousetrap": "github.com/inconshreveable/mousetrap",
                "com_github_josharian_intern": "github.com/josharian/intern",
                "com_github_json_iterator_go": "github.com/json-iterator/go",
                "com_github_klauspost_compress": "github.com/klauspost/compress",
                "com_github_mailru_easyjson": "github.com/mailru/easyjson",
                "com_github_mitchellh_go_homedir": "github.com/mitchellh/go-homedir",
                "com_github_moby_spdystream": "github.com/moby/spdystream",
                "com_github_modern_go_concurrent": "github.com/modern-go/concurrent",
                "com_github_modern_go_reflect2": "github.com/modern-go/reflect2",
                "com_github_munnerz_goautoneg": "github.com/munnerz/goautoneg",
                "com_github_opencontainers_go_digest": "github.com/opencontainers/go-digest",
                "com_github_opencontainers_image_spec": "github.com/opencontainers/image-spec",
                "com_github_pkg_errors": "github.com/pkg/errors",
                "com_github_sirupsen_logrus": "github.com/sirupsen/logrus",
                "com_github_spf13_cobra": "github.com/spf13/cobra",
                "com_github_spf13_pflag": "github.com/spf13/pflag",
                "com_github_vbatts_tar_split": "github.com/vbatts/tar-split",
                "org_golang_x_crypto": "golang.org/x/crypto",
                "org_golang_x_sync": "golang.org/x/sync",
                "org_golang_x_term": "golang.org/x/term",
                "org_golang_x_time": "golang.org/x/time",
                "org_golang_google_appengine": "google.golang.org/appengine",
                "in_gopkg_inf_v0": "gopkg.in/inf.v0",
                "in_gopkg_yaml_v2": "gopkg.in/yaml.v2",
                "in_gopkg_yaml_v3": "gopkg.in/yaml.v3",
                "io_k8s_klog_v2": "k8s.io/klog/v2",
                "io_k8s_kube_openapi": "k8s.io/kube-openapi",
                "io_k8s_utils": "k8s.io/utils",
                "io_k8s_sigs_json": "sigs.k8s.io/json",
                "io_k8s_sigs_structured_merge_diff_v4": "sigs.k8s.io/structured-merge-diff/v4",
                "io_k8s_sigs_yaml": "sigs.k8s.io/yaml",
                "com_github_bazelbuild_buildtools": "github.com/bazelbuild/buildtools",
                "com_github_bmatcuk_doublestar_v4": "github.com/bmatcuk/doublestar/v4",
                "com_github_fsnotify_fsnotify": "github.com/fsnotify/fsnotify",
                "com_github_pmezard_go_difflib": "github.com/pmezard/go-difflib",
                "org_golang_x_tools_go_vcs": "golang.org/x/tools/go/vcs",
                "@rules_go~0.46.0": "github.com/bazelbuild/rules_go",
                "@rules_gitops~override": "github.com/fasterci/rules_gitops",
                "@gazelle~0.37.0": "github.com/bazelbuild/bazel-gazelle"
              },
              "module_names": {
                "@rules_go~0.46.0": "rules_go",
                "@rules_gitops~override": "rules_gitops",
                "@gazelle~0.37.0": "gazelle"
              },
              "build_naming_conventions": {},
              "go_env": {},
              "dep_files": []
            }
          },
          "org_golang_x_sys": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~org_golang_x_sys",
              "importpath": "golang.org/x/sys",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=",
              "replace": "",
              "version": "v0.18.0"
            }
          },
          "com_github_go_openapi_jsonreference": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository.bzl",
            "ruleClassName": "go_repository",
            "attributes": {
              "name": "gazelle~0.37.0~go_deps~com_github_go_openapi_jsonreference",
              "importpath": "github.com/go-openapi/jsonreference",
              "build_directives": [],
              "build_file_generation": "auto",
              "build_extra_args": [],
              "patches": [],
              "patch_args": [],
              "debug_mode": false,
              "sum": "h1:3sVjiK66+uXK/6oQ8xgcRKcFgQ5KXa2KvnJRumpMGbE=",
              "replace": "",
              "version": "v0.20.2"
            }
          }
        },
        "moduleExtensionMetadata": {
          "explicitRootModuleDirectDeps": [],
          "explicitRootModuleDirectDevDeps": [],
          "useAllRepos": "NO"
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features~1.9.1",
            "bazel_features_globals",
            "bazel_features~1.9.1~version_extension~bazel_features_globals"
          ],
          [
            "bazel_features~1.9.1",
            "bazel_features_version",
            "bazel_features~1.9.1~version_extension~bazel_features_version"
          ],
          [
            "gazelle~0.37.0",
            "bazel_features",
            "bazel_features~1.9.1"
          ],
          [
            "gazelle~0.37.0",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@gazelle~0.37.0//internal/bzlmod:non_module_deps.bzl%non_module_deps": {
      "general": {
        "bzlTransitiveDigest": "SJ91NzGmPtlvdcBJsXcndAhw5AUl0SAa0Bo2dAYisi0=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "bazel_gazelle_is_bazel_module": {
            "bzlFile": "@@gazelle~0.37.0//internal:is_bazel_module.bzl",
            "ruleClassName": "is_bazel_module",
            "attributes": {
              "name": "gazelle~0.37.0~non_module_deps~bazel_gazelle_is_bazel_module",
              "is_bazel_module": true
            }
          },
          "bazel_gazelle_go_repository_tools": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository_tools.bzl",
            "ruleClassName": "go_repository_tools",
            "attributes": {
              "name": "gazelle~0.37.0~non_module_deps~bazel_gazelle_go_repository_tools",
              "go_cache": "@@gazelle~0.37.0~non_module_deps~bazel_gazelle_go_repository_cache//:go.env"
            }
          },
          "bazel_gazelle_go_repository_cache": {
            "bzlFile": "@@gazelle~0.37.0//internal:go_repository_cache.bzl",
            "ruleClassName": "go_repository_cache",
            "attributes": {
              "name": "gazelle~0.37.0~non_module_deps~bazel_gazelle_go_repository_cache",
              "go_sdk_name": "@rules_go~0.46.0~go_sdk~go_default_sdk",
              "go_env": {}
            }
          }
        },
        "moduleExtensionMetadata": {
          "useAllRepos": "NO"
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features~1.9.1",
            "bazel_features_globals",
            "bazel_features~1.9.1~version_extension~bazel_features_globals"
          ],
          [
            "bazel_features~1.9.1",
            "bazel_features_version",
            "bazel_features~1.9.1~version_extension~bazel_features_version"
          ],
          [
            "gazelle~0.37.0",
            "bazel_features",
            "bazel_features~1.9.1"
          ],
          [
            "gazelle~0.37.0",
            "bazel_gazelle_go_repository_cache",
            "gazelle~0.37.0~non_module_deps~bazel_gazelle_go_repository_cache"
          ],
          [
            "gazelle~0.37.0",
            "bazel_gazelle_go_repository_config",
            "gazelle~0.37.0~go_deps~bazel_gazelle_go_repository_config"
          ],
          [
            "gazelle~0.37.0",
            "go_host_compatible_sdk_label",
            "rules_go~0.46.0~go_sdk~go_host_compatible_sdk_label"
          ],
          [
            "rules_go~0.46.0~go_sdk~go_host_compatible_sdk_label",
            "go_default_sdk",
            "rules_go~0.46.0~go_sdk~go_default_sdk"
          ]
        ]
      }
    },
    "@@rules_gitops~override//gitops:extensions.bzl%toolchains": {
      "general": {
        "bzlTransitiveDigest": "7KoML+gmGc0zw78Cvm/P9ybt0yMKHvqdlM+SHqm6cn4=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "kustomize_linux_arm64": {
            "bzlFile": "@@rules_gitops~override//gitops/private:kustomize_toolchain.bzl",
            "ruleClassName": "kustomize_platform_repo",
            "attributes": {
              "name": "rules_gitops~override~toolchains~kustomize_linux_arm64",
              "platform": "linux_arm64",
              "version": "4.5.3"
            }
          },
          "kustomize_windows_amd64": {
            "bzlFile": "@@rules_gitops~override//gitops/private:kustomize_toolchain.bzl",
            "ruleClassName": "kustomize_platform_repo",
            "attributes": {
              "name": "rules_gitops~override~toolchains~kustomize_windows_amd64",
              "platform": "windows_amd64",
              "version": "4.5.3"
            }
          },
          "kustomize_toolchains": {
            "bzlFile": "@@rules_gitops~override//gitops/private:kustomize_toolchain.bzl",
            "ruleClassName": "kustomize_toolchains_repo",
            "attributes": {
              "name": "rules_gitops~override~toolchains~kustomize_toolchains",
              "user_repository_name": "kustomize"
            }
          },
          "kustomize_darwin_arm64": {
            "bzlFile": "@@rules_gitops~override//gitops/private:kustomize_toolchain.bzl",
            "ruleClassName": "kustomize_platform_repo",
            "attributes": {
              "name": "rules_gitops~override~toolchains~kustomize_darwin_arm64",
              "platform": "darwin_arm64",
              "version": "4.5.3"
            }
          },
          "kustomize": {
            "bzlFile": "@@rules_gitops~override//gitops/private:kustomize_toolchain.bzl",
            "ruleClassName": "kustomize_host_alias_repo",
            "attributes": {
              "name": "rules_gitops~override~toolchains~kustomize"
            }
          },
          "kustomize_bin": {
            "bzlFile": "@@rules_gitops~override//skylib/kustomize:kustomize.bzl",
            "ruleClassName": "download_kustomize",
            "attributes": {
              "name": "rules_gitops~override~toolchains~kustomize_bin"
            }
          },
          "kustomize_linux_amd64": {
            "bzlFile": "@@rules_gitops~override//gitops/private:kustomize_toolchain.bzl",
            "ruleClassName": "kustomize_platform_repo",
            "attributes": {
              "name": "rules_gitops~override~toolchains~kustomize_linux_amd64",
              "platform": "linux_amd64",
              "version": "4.5.3"
            }
          },
          "kustomize_darwin_amd64": {
            "bzlFile": "@@rules_gitops~override//gitops/private:kustomize_toolchain.bzl",
            "ruleClassName": "kustomize_platform_repo",
            "attributes": {
              "name": "rules_gitops~override~toolchains~kustomize_darwin_amd64",
              "platform": "darwin_amd64",
              "version": "4.5.3"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "rules_gitops~override",
            "bazel_skylib",
            "bazel_skylib~1.5.0"
          ],
          [
            "rules_gitops~override",
            "rules_gitops",
            "rules_gitops~override"
          ]
        ]
      }
    },
    "@@rules_go~0.46.0//go:extensions.bzl%go_sdk": {
      "os:linux,arch:amd64": {
        "bzlTransitiveDigest": "xYA6o80aHHGOzyLVnXKg8vFZtaZrlbhYVUWZBgpvPXg=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "rules_gitops__download_0": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_gitops__download_0",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "experiments": [],
              "patches": [],
              "patch_strip": 0,
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.5",
              "strip_prefix": "go"
            }
          },
          "rules_go__download_0_darwin_arm64": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_go__download_0_darwin_arm64",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.1"
            }
          },
          "go_host_compatible_sdk_label": {
            "bzlFile": "@@rules_go~0.46.0//go/private:extensions.bzl",
            "ruleClassName": "host_compatible_toolchain",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~go_host_compatible_sdk_label",
              "toolchain": "@go_default_sdk//:ROOT"
            }
          },
          "rules_go__download_0_darwin_amd64": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_go__download_0_darwin_amd64",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.1"
            }
          },
          "rules_gitops__download_0_windows_amd64": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_gitops__download_0_windows_amd64",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.5"
            }
          },
          "go_toolchains": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_multiple_toolchains",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~go_toolchains",
              "prefixes": [
                "_0000_go_default_sdk_",
                "_0001_rules_go__download_0_darwin_amd64_",
                "_0002_rules_go__download_0_darwin_arm64_",
                "_0003_rules_go__download_0_linux_arm64_",
                "_0004_rules_go__download_0_windows_amd64_",
                "_0005_rules_go__download_0_windows_arm64_",
                "_0006_rules_gitops__download_0_",
                "_0007_rules_gitops__download_0_darwin_amd64_",
                "_0008_rules_gitops__download_0_darwin_arm64_",
                "_0009_rules_gitops__download_0_linux_arm64_",
                "_0010_rules_gitops__download_0_windows_amd64_",
                "_0011_rules_gitops__download_0_windows_arm64_"
              ],
              "geese": [
                "",
                "darwin",
                "darwin",
                "linux",
                "windows",
                "windows",
                "",
                "darwin",
                "darwin",
                "linux",
                "windows",
                "windows"
              ],
              "goarchs": [
                "",
                "amd64",
                "arm64",
                "arm64",
                "amd64",
                "arm64",
                "",
                "amd64",
                "arm64",
                "arm64",
                "amd64",
                "arm64"
              ],
              "sdk_repos": [
                "go_default_sdk",
                "rules_go__download_0_darwin_amd64",
                "rules_go__download_0_darwin_arm64",
                "rules_go__download_0_linux_arm64",
                "rules_go__download_0_windows_amd64",
                "rules_go__download_0_windows_arm64",
                "rules_gitops__download_0",
                "rules_gitops__download_0_darwin_amd64",
                "rules_gitops__download_0_darwin_arm64",
                "rules_gitops__download_0_linux_arm64",
                "rules_gitops__download_0_windows_amd64",
                "rules_gitops__download_0_windows_arm64"
              ],
              "sdk_types": [
                "remote",
                "remote",
                "remote",
                "remote",
                "remote",
                "remote",
                "remote",
                "remote",
                "remote",
                "remote",
                "remote",
                "remote"
              ],
              "sdk_versions": [
                "1.21.1",
                "1.21.1",
                "1.21.1",
                "1.21.1",
                "1.21.1",
                "1.21.1",
                "1.21.5",
                "1.21.5",
                "1.21.5",
                "1.21.5",
                "1.21.5",
                "1.21.5"
              ]
            }
          },
          "rules_gitops__download_0_linux_arm64": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_gitops__download_0_linux_arm64",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.5"
            }
          },
          "rules_gitops__download_0_darwin_arm64": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_gitops__download_0_darwin_arm64",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.5"
            }
          },
          "io_bazel_rules_nogo": {
            "bzlFile": "@@rules_go~0.46.0//go/private:nogo.bzl",
            "ruleClassName": "go_register_nogo",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~io_bazel_rules_nogo",
              "nogo": "@io_bazel_rules_go//:default_nogo",
              "includes": [
                "'@@//:__subpackages__'"
              ],
              "excludes": []
            }
          },
          "rules_gitops__download_0_darwin_amd64": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_gitops__download_0_darwin_amd64",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.5"
            }
          },
          "rules_go__download_0_windows_arm64": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_go__download_0_windows_arm64",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.1"
            }
          },
          "rules_go__download_0_linux_arm64": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_go__download_0_linux_arm64",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.1"
            }
          },
          "go_default_sdk": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~go_default_sdk",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "experiments": [],
              "patches": [],
              "patch_strip": 0,
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.1",
              "strip_prefix": "go"
            }
          },
          "rules_gitops__download_0_windows_arm64": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_gitops__download_0_windows_arm64",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.5"
            }
          },
          "rules_go__download_0_windows_amd64": {
            "bzlFile": "@@rules_go~0.46.0//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "name": "rules_go~0.46.0~go_sdk~rules_go__download_0_windows_amd64",
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.21.1"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features~1.9.1",
            "bazel_features_globals",
            "bazel_features~1.9.1~version_extension~bazel_features_globals"
          ],
          [
            "bazel_features~1.9.1",
            "bazel_features_version",
            "bazel_features~1.9.1~version_extension~bazel_features_version"
          ],
          [
            "rules_go~0.46.0",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_go~0.46.0",
            "io_bazel_rules_go",
            "rules_go~0.46.0"
          ],
          [
            "rules_go~0.46.0",
            "io_bazel_rules_go_bazel_features",
            "bazel_features~1.9.1"
          ]
        ]
      }
    },
    "@@rules_java~7.1.0//java:extensions.bzl%toolchains": {
      "general": {
        "bzlTransitiveDigest": "D02GmifxnV/IhYgspsJMDZ/aE8HxAjXgek5gi6FSto4=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "remotejdk21_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_s390x_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_s390x_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk21_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk21_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "2a7a99a3ea263dbd8d32a67d1e6e363ba8b25c645c826f5e167a02bbafaff1fa",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-macosx_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk17_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "314b04568ec0ae9b36ba03c9cbd42adc9e1265f74678923b19297d66eb84dcca",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remote_java_tools_windows": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_windows",
              "sha256": "c5c70c214a350f12cbf52da8270fa43ba629b795f3dd328028a38f8f0d39c2a1",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_windows-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_windows-v13.1.zip"
              ]
            }
          },
          "remotejdk11_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "43408193ce2fa0862819495b5ae8541085b95660153f2adcf91a52d3a1710e83",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-win_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip"
              ]
            }
          },
          "remotejdk11_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "54174439f2b3fddd11f1048c397fe7bb45d4c9d66d452d6889b013d04d21c4de",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-linux_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk17_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "b9482f2304a1a68a614dfacddcf29569a72f0fac32e6c74f83dc1b9a157b8340",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-linux_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_s390x_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_s390x_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk11_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "bcaab11cfe586fae7583c6d9d311c64384354fb2638eb9a012eca4c3f1a1d9fd",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-macosx_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_win_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_arm64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "b8a28e6e767d90acf793ea6f5bed0bb595ba0ba5ebdf8b99f395266161e53ec2",
              "strip_prefix": "jdk-11.0.13+8",
              "urls": [
                "https://mirror.bazel.build/aka.ms/download-jdk/microsoft-jdk-11.0.13.8.1-windows-aarch64.zip"
              ]
            }
          },
          "remotejdk17_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "640453e8afe8ffe0fb4dceb4535fb50db9c283c64665eebb0ba68b19e65f4b1f",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-macosx_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk21_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "9639b87db586d0c89f7a9892ae47f421e442c64b97baebdff31788fbe23265bd",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-macosx_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk21_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk17_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "192f2afca57701de6ec496234f7e45d971bf623ff66b8ee4a5c81582054e5637",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-win_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip"
              ]
            }
          },
          "remotejdk11_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_ppc64le_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_ppc64le_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\n"
            }
          },
          "remotejdk21_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "0c0eadfbdc47a7ca64aeab51b9c061f71b6e4d25d2d87674512e9b6387e9e3a6",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-linux_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_x64.tar.gz"
              ]
            }
          },
          "remote_java_tools_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_linux",
              "sha256": "d134da9b04c9023fb6e56a5d4bffccee73f7bc9572ddc4e747778dacccd7a5a7",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_linux-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_linux-v13.1.zip"
              ]
            }
          },
          "remotejdk21_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_win",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "e9959d500a0d9a7694ac243baf657761479da132f0f94720cbffd092150bd802",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-win_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-win_x64.zip",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-win_x64.zip"
              ]
            }
          },
          "remotejdk21_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "1fb64b8036c5d463d8ab59af06bf5b6b006811e6012e3b0eb6bccf57f1c55835",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-linux_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_s390x": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_s390x",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a58fc0361966af0a5d5a31a2d8a208e3c9bb0f54f345596fd80b99ea9a39788b",
              "strip_prefix": "jdk-11.0.15+10",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz",
                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz"
              ]
            }
          },
          "remotejdk17_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "6531cef61e416d5a7b691555c8cf2bdff689201b8a001ff45ab6740062b44313",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk17_win_arm64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_arm64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a34b404f87a08a61148b38e1416d837189e1df7a040d949e743633daf4695a3c",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-linux_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_ppc64le_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_ppc64le_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\n"
            }
          },
          "remotejdk17_win_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_arm64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "6802c99eae0d788e21f52d03cab2e2b3bf42bc334ca03cbf19f71eb70ee19f85",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-win_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip"
              ]
            }
          },
          "remote_java_tools_darwin_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_darwin_arm64",
              "sha256": "dab5bb87ec43e980faea6e1cec14bafb217b8e2f5346f53aa784fd715929a930",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_darwin_arm64-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_darwin_arm64-v13.1.zip"
              ]
            }
          },
          "remotejdk17_linux_ppc64le": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_ppc64le",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "00a4c07603d0218cd678461b5b3b7e25b3253102da4022d31fc35907f21a2efd",
              "strip_prefix": "jdk-17.0.8.1+1",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz",
                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz"
              ]
            }
          },
          "remotejdk21_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_win_arm64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_arm64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\n"
            }
          },
          "local_jdk": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:local_java_repository.bzl",
            "ruleClassName": "_local_java_repository_rule",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~local_jdk",
              "java_home": "",
              "version": "",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = {RUNTIME_VERSION},\n)\n"
            }
          },
          "remote_java_tools_darwin_x86_64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_darwin_x86_64",
              "sha256": "0db40d8505a2b65ef0ed46e4256757807db8162f7acff16225be57c1d5726dbc",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_darwin_x86_64-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_darwin_x86_64-v13.1.zip"
              ]
            }
          },
          "remote_java_tools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools",
              "sha256": "286bdbbd66e616fc4ed3f90101418729a73baa7e8c23a98ffbef558f74c0ad14",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools-v13.1.zip"
              ]
            }
          },
          "remotejdk17_linux_s390x": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_s390x",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "ffacba69c6843d7ca70d572489d6cc7ab7ae52c60f0852cedf4cf0d248b6fc37",
              "strip_prefix": "jdk-17.0.8.1+1",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz",
                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz"
              ]
            }
          },
          "remotejdk17_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_ppc64le": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_ppc64le",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a8fba686f6eb8ae1d1a9566821dbd5a85a1108b96ad857fdbac5c1e4649fc56f",
              "strip_prefix": "jdk-11.0.15+10",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz",
                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz"
              ]
            }
          },
          "remotejdk11_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "7632bc29f8a4b7d492b93f3bc75a7b61630894db85d136456035ab2a24d38885",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-macosx_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk21_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win//:jdk\",\n)\n"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "rules_java~7.1.0",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_java~7.1.0",
            "remote_java_tools",
            "rules_java~7.1.0~toolchains~remote_java_tools"
          ]
        ]
      }
    },
    "@@rules_oci~1.7.2//oci:extensions.bzl%oci": {
      "general": {
        "bzlTransitiveDigest": "4iH2Ba8wf84hjJ58iLsv1JcOGxeNQlnvIRFvIH1F+Us=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "oci_crane_registry_toolchains": {
            "bzlFile": "@@rules_oci~1.7.2//oci/private:toolchains_repo.bzl",
            "ruleClassName": "toolchains_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_registry_toolchains",
              "toolchain_type": "@rules_oci//oci:registry_toolchain_type",
              "toolchain": "@oci_crane_{platform}//:registry_toolchain"
            }
          },
          "copy_to_directory_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~copy_to_directory_windows_amd64",
              "platform": "windows_amd64"
            }
          },
          "jq": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_host_alias_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~jq"
            }
          },
          "oci_crane_darwin_amd64": {
            "bzlFile": "@@rules_oci~1.7.2//oci:repositories.bzl",
            "ruleClassName": "crane_repositories",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_darwin_amd64",
              "platform": "darwin_amd64",
              "crane_version": "v0.18.0"
            }
          },
          "jq_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~jq_darwin_amd64",
              "platform": "darwin_amd64",
              "version": "1.7"
            }
          },
          "copy_to_directory_freebsd_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~copy_to_directory_freebsd_amd64",
              "platform": "freebsd_amd64"
            }
          },
          "go_image_static_single": {
            "bzlFile": "@@rules_oci~1.7.2//oci/private:pull.bzl",
            "ruleClassName": "oci_pull",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~go_image_static_single",
              "scheme": "https",
              "registry": "gcr.io",
              "repository": "distroless/static",
              "identifier": "sha256:ebd8cc37d22551dce0957ba8e58f03b22a8448bbf844c8c9ded4feef883b36bc",
              "target_name": "go_image_static_single"
            }
          },
          "copy_to_directory_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~copy_to_directory_linux_amd64",
              "platform": "linux_amd64"
            }
          },
          "oci_crane_linux_arm64": {
            "bzlFile": "@@rules_oci~1.7.2//oci:repositories.bzl",
            "ruleClassName": "crane_repositories",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_linux_arm64",
              "platform": "linux_arm64",
              "crane_version": "v0.18.0"
            }
          },
          "jq_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~jq_linux_arm64",
              "platform": "linux_arm64",
              "version": "1.7"
            }
          },
          "coreutils_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~coreutils_darwin_arm64",
              "platform": "darwin_arm64",
              "version": "0.0.23"
            }
          },
          "coreutils_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~coreutils_linux_amd64",
              "platform": "linux_amd64",
              "version": "0.0.23"
            }
          },
          "yq_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~yq_linux_amd64",
              "platform": "linux_amd64",
              "version": "4.25.2"
            }
          },
          "copy_to_directory_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~copy_to_directory_linux_arm64",
              "platform": "linux_arm64"
            }
          },
          "oci_crane_linux_armv6": {
            "bzlFile": "@@rules_oci~1.7.2//oci:repositories.bzl",
            "ruleClassName": "crane_repositories",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_linux_armv6",
              "platform": "linux_armv6",
              "crane_version": "v0.18.0"
            }
          },
          "copy_to_directory_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~copy_to_directory_darwin_arm64",
              "platform": "darwin_arm64"
            }
          },
          "oci_crane_linux_amd64": {
            "bzlFile": "@@rules_oci~1.7.2//oci:repositories.bzl",
            "ruleClassName": "crane_repositories",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_linux_amd64",
              "platform": "linux_amd64",
              "crane_version": "v0.18.0"
            }
          },
          "coreutils_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~coreutils_darwin_amd64",
              "platform": "darwin_amd64",
              "version": "0.0.23"
            }
          },
          "coreutils_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~coreutils_linux_arm64",
              "platform": "linux_arm64",
              "version": "0.0.23"
            }
          },
          "coreutils_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_toolchains_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~coreutils_toolchains",
              "user_repository_name": "coreutils"
            }
          },
          "yq_linux_s390x": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~yq_linux_s390x",
              "platform": "linux_s390x",
              "version": "4.25.2"
            }
          },
          "yq": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_host_alias_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~yq"
            }
          },
          "oci_crane_darwin_arm64": {
            "bzlFile": "@@rules_oci~1.7.2//oci:repositories.bzl",
            "ruleClassName": "crane_repositories",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_darwin_arm64",
              "platform": "darwin_arm64",
              "crane_version": "v0.18.0"
            }
          },
          "jq_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~jq_darwin_arm64",
              "platform": "darwin_arm64",
              "version": "1.7"
            }
          },
          "yq_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~yq_darwin_amd64",
              "platform": "darwin_amd64",
              "version": "4.25.2"
            }
          },
          "oci_crane_linux_i386": {
            "bzlFile": "@@rules_oci~1.7.2//oci:repositories.bzl",
            "ruleClassName": "crane_repositories",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_linux_i386",
              "platform": "linux_i386",
              "crane_version": "v0.18.0"
            }
          },
          "jq_linux_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~jq_linux_amd64",
              "platform": "linux_amd64",
              "version": "1.7"
            }
          },
          "yq_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~yq_windows_amd64",
              "platform": "windows_amd64",
              "version": "4.25.2"
            }
          },
          "oci_crane_windows_armv6": {
            "bzlFile": "@@rules_oci~1.7.2//oci:repositories.bzl",
            "ruleClassName": "crane_repositories",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_windows_armv6",
              "platform": "windows_armv6",
              "crane_version": "v0.18.0"
            }
          },
          "oci_crane_toolchains": {
            "bzlFile": "@@rules_oci~1.7.2//oci/private:toolchains_repo.bzl",
            "ruleClassName": "toolchains_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_toolchains",
              "toolchain_type": "@rules_oci//oci:crane_toolchain_type",
              "toolchain": "@oci_crane_{platform}//:crane_toolchain"
            }
          },
          "jq_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~jq_windows_amd64",
              "platform": "windows_amd64",
              "version": "1.7"
            }
          },
          "copy_to_directory_darwin_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~copy_to_directory_darwin_amd64",
              "platform": "darwin_amd64"
            }
          },
          "yq_linux_ppc64le": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~yq_linux_ppc64le",
              "platform": "linux_ppc64le",
              "version": "4.25.2"
            }
          },
          "jq_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:jq_toolchain.bzl",
            "ruleClassName": "jq_toolchains_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~jq_toolchains",
              "user_repository_name": "jq"
            }
          },
          "copy_to_directory_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:copy_to_directory_toolchain.bzl",
            "ruleClassName": "copy_to_directory_toolchains_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~copy_to_directory_toolchains",
              "user_repository_name": "copy_to_directory"
            }
          },
          "yq_darwin_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~yq_darwin_arm64",
              "platform": "darwin_arm64",
              "version": "4.25.2"
            }
          },
          "yq_toolchains": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_toolchains_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~yq_toolchains",
              "user_repository_name": "yq"
            }
          },
          "go_image_static": {
            "bzlFile": "@@rules_oci~1.7.2//oci/private:pull.bzl",
            "ruleClassName": "oci_alias",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~go_image_static",
              "target_name": "go_image_static",
              "scheme": "https",
              "registry": "gcr.io",
              "repository": "distroless/static",
              "identifier": "sha256:ebd8cc37d22551dce0957ba8e58f03b22a8448bbf844c8c9ded4feef883b36bc",
              "platforms": {},
              "platform": "@@rules_oci~1.7.2//oci:go_image_static_single",
              "bzlmod_repository": "go_image_static",
              "reproducible": true
            }
          },
          "oci_crane_windows_amd64": {
            "bzlFile": "@@rules_oci~1.7.2//oci:repositories.bzl",
            "ruleClassName": "crane_repositories",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_windows_amd64",
              "platform": "windows_amd64",
              "crane_version": "v0.18.0"
            }
          },
          "oci_crane_linux_s390x": {
            "bzlFile": "@@rules_oci~1.7.2//oci:repositories.bzl",
            "ruleClassName": "crane_repositories",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~oci_crane_linux_s390x",
              "platform": "linux_s390x",
              "crane_version": "v0.18.0"
            }
          },
          "coreutils_windows_amd64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:coreutils_toolchain.bzl",
            "ruleClassName": "coreutils_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~coreutils_windows_amd64",
              "platform": "windows_amd64",
              "version": "0.0.23"
            }
          },
          "yq_linux_arm64": {
            "bzlFile": "@@aspect_bazel_lib~2.7.1//lib/private:yq_toolchain.bzl",
            "ruleClassName": "yq_platform_repo",
            "attributes": {
              "name": "rules_oci~1.7.2~oci~yq_linux_arm64",
              "platform": "linux_arm64",
              "version": "4.25.2"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "aspect_bazel_lib~2.7.1",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_oci~1.7.2",
            "aspect_bazel_lib",
            "aspect_bazel_lib~2.7.1"
          ],
          [
            "rules_oci~1.7.2",
            "bazel_skylib",
            "bazel_skylib~1.5.0"
          ]
        ]
      }
    },
    "@@rules_python~0.10.2//python:extensions.bzl%pip_install": {
      "general": {
        "bzlTransitiveDigest": "7AvdSiZR6OSZZhgJCJJYhrJbhi7tTP1EGFGu68oep00=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "pypi__colorama": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.10.2~pip_install~pypi__colorama",
              "url": "https://files.pythonhosted.org/packages/44/98/5b86278fbbf250d239ae0ecb724f8572af1c91f4a11edf4d36a206189440/colorama-0.4.4-py2.py3-none-any.whl",
              "sha256": "9f47eda37229f68eee03b24b9748937c7dc3868f906e8ba69fbcbdd3bc5dc3e2",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\"**/*.py\", \"**/* *\", \"BUILD\", \"WORKSPACE\"]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__wheel": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.10.2~pip_install~pypi__wheel",
              "url": "https://files.pythonhosted.org/packages/27/d6/003e593296a85fd6ed616ed962795b2f87709c3eee2bca4f6d0fe55c6d00/wheel-0.37.1-py2.py3-none-any.whl",
              "sha256": "4bdcd7d840138086126cd09254dc6195fb4fc6f01c050a1d7236f2630db1d22a",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\"**/*.py\", \"**/* *\", \"BUILD\", \"WORKSPACE\"]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__click": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.10.2~pip_install~pypi__click",
              "url": "https://files.pythonhosted.org/packages/76/0a/b6c5f311e32aeb3b406e03c079ade51e905ea630fc19d1262a46249c1c86/click-8.0.1-py3-none-any.whl",
              "sha256": "fba402a4a47334742d782209a7c79bc448911afe1149d07bdabdf480b3e2f4b6",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\"**/*.py\", \"**/* *\", \"BUILD\", \"WORKSPACE\"]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__pep517": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.10.2~pip_install~pypi__pep517",
              "url": "https://files.pythonhosted.org/packages/f4/67/846c08e18fefb265a66e6fd5a34269d649b779718d9bf59622085dabd370/pep517-0.12.0-py2.py3-none-any.whl",
              "sha256": "dd884c326898e2c6e11f9e0b64940606a93eb10ea022a2e067959f3a110cf161",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\"**/*.py\", \"**/* *\", \"BUILD\", \"WORKSPACE\"]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__pip": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.10.2~pip_install~pypi__pip",
              "url": "https://files.pythonhosted.org/packages/96/2f/caec18213f6a67852f6997fb0673ae08d2e93d1b81573edb93ba4ef06970/pip-22.1.2-py3-none-any.whl",
              "sha256": "a3edacb89022ef5258bf61852728bf866632a394da837ca49eb4303635835f17",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\"**/*.py\", \"**/* *\", \"BUILD\", \"WORKSPACE\"]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__installer": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.10.2~pip_install~pypi__installer",
              "url": "https://files.pythonhosted.org/packages/1b/21/3e6ebd12d8dccc55bcb7338db462c75ac86dbd0ac7439ac114616b21667b/installer-0.5.1-py3-none-any.whl",
              "sha256": "1d6c8d916ed82771945b9c813699e6f57424ded970c9d8bf16bbc23e1e826ed3",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\"**/*.py\", \"**/* *\", \"BUILD\", \"WORKSPACE\"]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__pip_tools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.10.2~pip_install~pypi__pip_tools",
              "url": "https://files.pythonhosted.org/packages/fe/5c/8995799b0ccf832906b4968b4eb2045beb9b3de79e96e6b1a6e4fc4e6974/pip_tools-6.6.2-py3-none-any.whl",
              "sha256": "6b486548e5a139e30e4c4a225b3b7c2d46942a9f6d1a91143c21b1de4d02fd9b",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\"**/*.py\", \"**/* *\", \"BUILD\", \"WORKSPACE\"]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__setuptools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.10.2~pip_install~pypi__setuptools",
              "url": "https://files.pythonhosted.org/packages/7c/5b/3d92b9f0f7ca1645cba48c080b54fe7d8b1033a4e5720091d1631c4266db/setuptools-60.10.0-py3-none-any.whl",
              "sha256": "782ef48d58982ddb49920c11a0c5c9c0b02e7d7d1c2ad0aa44e1a1e133051c96",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\"**/*.py\", \"**/* *\", \"BUILD\", \"WORKSPACE\"]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__tomli": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.10.2~pip_install~pypi__tomli",
              "url": "https://files.pythonhosted.org/packages/97/75/10a9ebee3fd790d20926a90a2547f0bf78f371b2f13aa822c759680ca7b9/tomli-2.0.1-py3-none-any.whl",
              "sha256": "939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\"**/*.py\", \"**/* *\", \"BUILD\", \"WORKSPACE\"]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "rules_python~0.10.2",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_python~0.10.2",
            "rules_python",
            "rules_python~0.10.2"
          ]
        ]
      }
    }
  }
}
